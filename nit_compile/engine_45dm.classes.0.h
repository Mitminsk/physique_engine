#include "nit.common.h"
extern const struct class class_core__Int;
extern const struct class class_core__Char;
extern const struct class class_core__Bool;
extern const struct type type_core__Int;
extern const struct type type_core__Char;
extern const struct type type_core__Bool;
void core___core__Object___init(val* self);
short int core___core__Object____33d_61d(val* self, val* p0);
val* core___core__Object___sys(val* self);
short int core___core__Object____61d_61d(val* self, val* p0);
val* core__abstract_text___Object___to_s(val* self);
short int core___core__Object___is_same_instance(val* self, val* p0);
short int core___core__Object___is_same_type(val* self, val* p0);
long core___core__Object___hash(val* self);
val* core__abstract_text___Object___inspect(val* self);
long core___core__Object___object_id(val* self);
val* core__abstract_text___Object___inspect_head(val* self);
val* core__abstract_text___Object___class_name(val* self);
char* core__abstract_text___Object___native_class_name(val* self);
void physique___physique__World___add_force(val* self, val* p0);
val* physique___physique__World___forces_applied(val* self);
void physique___physique__World___add_entity(val* self, val* p0);
val* physique___physique__World___entities(val* self);
void physique___physique__World___load_entity(val* self, val* p0);
void physique___physique__World___update(val* self, double p0);
void physique___physique__World___apply_event(val* self, double p0, val* p1);
void physique___physique__World___apply_forces_entities(val* self);
void physique___physique__World___check_collision(val* self, val* p0, val* p1);
extern const struct class class_physique__World;
val* NEW_core__Array(const struct type* type);
extern const struct type type_core__Array__physique__Entity;
extern const int COLOR_core__kernel__Object__init;
extern const int COLOR_physique__world__World___entities;
extern const struct type type_core__Array__physique__Force;
extern const int COLOR_physique__world__World___forces_applied;
void core__ropes___core__ropes__Concat___core__kernel__Object__init(val* self);
short int core___core__Text___core__kernel__Object___61d_61d(val* self, val* p0);
val* core___core__String___Object__to_s(val* self);
long core___core__Text___core__kernel__Object__hash(val* self);
short int core___core__Comparable____60d_61d(val* self, val* p0);
short int core___core__Comparable____62d_61d(val* self, val* p0);
short int core___core__Text___core__kernel__Comparable___60d(val* self, val* p0);
short int core___core__Comparable____62d(val* self, val* p0);
val* core___core__Pattern___split_in(val* self, val* p0);
val* core__string_search___Text___Pattern__search_in(val* self, val* p0, long p1);
long core__string_search___Text___Pattern__search_index_in(val* self, val* p0, long p1);
long core__fixed_ints___Text___to_i(val* self);
char* core__ropes___core__ropes__Concat___core__abstract_text__Text__to_cstring(val* self);
long core__ropes___core__ropes__Concat___core__abstract_text__Text__length(val* self);
val* core__ropes___core__ropes__Concat___core__abstract_text__Text__chars(val* self);
val* core__ropes___core__ropes__Concat___core__abstract_text__Text__substring(val* self, long p0, long p1);
short int core__fixed_ints___Text___is_int(val* self);
val* core__string_search___Text___remove_all(val* self, val* p0);
uint32_t core__ropes___core__ropes__Concat___core__abstract_text__Text___91d_93d(val* self, long p0);
val* core___core__Text___substring_from(val* self, long p0);
long core___core__Text___to_hex(val* self, val* p0, val* p1);
long core___core__Text___to_oct(val* self);
long core___core__Text___to_bin(val* self);
long core___core__Text___to_dec(val* self);
long core__ropes___core__ropes__Concat___core__abstract_text__Text__bytelen(val* self);
val* core__ropes___core__ropes__Concat___core__abstract_text__Text__substrings(val* self);
val* core___core__Text___hash_cache(val* self);
void core___core__Text___hash_cache_61d(val* self, val* p0);
val* core__fixed_ints___Text___strip_numhead(val* self);
val* core__fixed_ints___Text___get_numhead(val* self);
short int core___core__Text___is_hex(val* self);
short int core___core__Text___is_bin(val* self);
short int core___core__Text___is_oct(val* self);
short int core___core__Text___is_dec(val* self);
val* core__string_search___Text___split(val* self, val* p0);
val* core__ropes___core__ropes__Concat___core__abstract_text__Text__empty(val* self);
long core___core__Text___a_to(val* self, long p0);
short int core__ropes___core__ropes__Concat___core__abstract_text__Text__is_empty(val* self);
uint32_t core___core__Text___last(val* self);
void core__file___Text___write_native_to(val* self, val* p0);
val* core__environ___String___environ(val* self);
val* core__ropes___core__ropes__Concat___core__abstract_text__String___43d(val* self, val* p0);
val* core__ropes___core__ropes__Concat___core__abstract_text__String___42d(val* self, long p0);
val* core__file___String____47d(val* self, val* p0);
val* core__file___String___dirname(val* self);
val* core__file___String___join_path(val* self, val* p0);
void core__ropes___core__ropes__Concat___left_61d(val* self, val* p0);
void core__ropes___core__ropes__Concat___right_61d(val* self, val* p0);
void core__ropes___core__ropes__Concat___length_61d(val* self, long p0);
val* core__ropes___core__ropes__Concat___get_leaf_at(val* self, long p0);
extern const struct class class_core__ropes__Concat;
extern const int COLOR_core__ropes__Concat___flat_last_pos_start;
extern const int COLOR_core__ropes__Concat___flat_last_pos_end;
void core__ropes___core__ropes__RopeCharIteratorPiece___core__kernel__Object__init(val* self);
val* core__ropes___core__ropes__RopeCharIteratorPiece___prev(val* self);
val* core__ropes___core__ropes__RopeCharIteratorPiece___node(val* self);
void core__ropes___core__ropes__RopeCharIteratorPiece___ldone_61d(val* self, short int p0);
void core__ropes___core__ropes__RopeCharIteratorPiece___rdone_61d(val* self, short int p0);
short int core__ropes___core__ropes__RopeCharIteratorPiece___ldone(val* self);
void core__ropes___core__ropes__RopeCharIteratorPiece___node_61d(val* self, val* p0);
void core__ropes___core__ropes__RopeCharIteratorPiece___prev_61d(val* self, val* p0);
short int core__ropes___core__ropes__RopeCharIteratorPiece___rdone(val* self);
extern const struct class class_core__ropes__RopeCharIteratorPiece;
val* VIRTUAL_core__ropes___core__ropes__RopeByteIterator___core__abstract_collection__Iterator__item(val* self);
void core__ropes___core__ropes__RopeByteIterator___core__abstract_collection__Iterator__next(val* self);
short int core__ropes___core__ropes__RopeByteIterator___core__abstract_collection__Iterator__is_ok(val* self);
val* core___core__Iterator___iterator(val* self);
void core___core__Iterator___finish(val* self);
long core__ropes___core__ropes__RopeByteIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__ropes___core__ropes__RopeByteIterator___from(val* self, val* p0, long p1);
char* core__ropes___core__ropes__RopeByteIterator___ns(val* self);
long core__ropes___core__ropes__RopeByteIterator___pns(val* self);
void core__ropes___core__ropes__RopeByteIterator___pns_61d(val* self, long p0);
void core__ropes___core__ropes__RopeByteIterator___pos_61d(val* self, long p0);
long core__ropes___core__ropes__RopeByteIterator___pos(val* self);
val* core__ropes___core__ropes__RopeByteIterator___subs(val* self);
void core__ropes___core__ropes__RopeByteIterator___ns_61d(val* self, char* p0);
long core__ropes___core__ropes__RopeByteIterator___max(val* self);
void core__ropes___core__ropes__RopeByteIterator___subs_61d(val* self, val* p0);
void core__ropes___core__ropes__RopeByteIterator___max_61d(val* self, long p0);
extern const struct class class_core__ropes__RopeByteIterator;
val* VIRTUAL_core__ropes___core__ropes__RopeCharIterator___core__abstract_collection__Iterator__item(val* self);
void core__ropes___core__ropes__RopeCharIterator___core__abstract_collection__Iterator__next(val* self);
short int core__ropes___core__ropes__RopeCharIterator___core__abstract_collection__Iterator__is_ok(val* self);
long core__ropes___core__ropes__RopeCharIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__ropes___core__ropes__RopeCharIterator___from(val* self, val* p0, long p1);
val* core__ropes___core__ropes__RopeCharIterator___str(val* self);
long core__ropes___core__ropes__RopeCharIterator___pns(val* self);
void core__ropes___core__ropes__RopeCharIterator___pns_61d(val* self, long p0);
void core__ropes___core__ropes__RopeCharIterator___pos_61d(val* self, long p0);
long core__ropes___core__ropes__RopeCharIterator___pos(val* self);
val* core__ropes___core__ropes__RopeCharIterator___subs(val* self);
void core__ropes___core__ropes__RopeCharIterator___str_61d(val* self, val* p0);
long core__ropes___core__ropes__RopeCharIterator___max(val* self);
void core__ropes___core__ropes__RopeCharIterator___subs_61d(val* self, val* p0);
void core__ropes___core__ropes__RopeCharIterator___max_61d(val* self, long p0);
extern const struct class class_core__ropes__RopeCharIterator;
val* core__ropes___core__ropes__RopeSubstrings___core__abstract_collection__Iterator__item(val* self);
void core__ropes___core__ropes__RopeSubstrings___core__abstract_collection__Iterator__next(val* self);
short int core__ropes___core__ropes__RopeSubstrings___core__abstract_collection__Iterator__is_ok(val* self);
long core__ropes___core__ropes__RopeSubstrings___core__abstract_collection__IndexedIterator__index(val* self);
void core__ropes___core__ropes__RopeSubstrings___from(val* self, val* p0, long p1);
val* core__ropes___core__ropes__RopeSubstrings___str(val* self);
void core__ropes___core__ropes__RopeSubstrings___pos_61d(val* self, long p0);
long core__ropes___core__ropes__RopeSubstrings___pos(val* self);
long core__ropes___core__ropes__RopeSubstrings___max(val* self);
val* core__ropes___core__ropes__RopeSubstrings___iter(val* self);
void core__ropes___core__ropes__RopeSubstrings___str_61d(val* self, val* p0);
void core__ropes___core__ropes__RopeSubstrings___iter_61d(val* self, val* p0);
void core__ropes___core__ropes__RopeSubstrings___max_61d(val* self, long p0);
extern const struct class class_core__ropes__RopeSubstrings;
void core__abstract_text___core__abstract_text__StringCharView___core__kernel__Object__init(val* self);
short int core___core__SequenceRead___core__kernel__Object___61d_61d(val* self, val* p0);
val* core__abstract_text___Collection___Object__to_s(val* self);
long core___core__SequenceRead___core__kernel__Object__hash(val* self);
void core__abstract_text___core__abstract_text__StringCharView___target_61d(val* self, val* p0);
val* core__abstract_text___core__abstract_text__StringCharView___target(val* self);
val* core__abstract_text___Collection___join(val* self, val* p0);
long core__abstract_text___core__abstract_text__StringCharView___core__abstract_collection__Collection__length(val* self);
short int core___core__Collection___has_all(val* self, val* p0);
short int core__abstract_text___core__abstract_text__StringCharView___core__abstract_collection__Collection__is_empty(val* self);
val* core__abstract_text___core__abstract_text__StringCharView___core__abstract_collection__Collection__iterator(val* self);
short int core___core__Collection___has(val* self, val* p0);
val* core___core__SequenceRead___Collection__first(val* self);
val* core__array___Collection___to_a(val* self);
val* VIRTUAL_core__ropes___core__ropes__RopeChars___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core__ropes___core__ropes__RopeChars___core__abstract_collection__SequenceRead__iterator_from(val* self, long p0);
long core___core__SequenceRead___last_index_of_from(val* self, val* p0, long p1);
extern const struct class class_core__ropes__RopeChars;
void core__abstract_text___core__abstract_text__StringByteView___core__kernel__Object__init(val* self);
void core__abstract_text___core__abstract_text__StringByteView___target_61d(val* self, val* p0);
val* core__abstract_text___core__abstract_text__StringByteView___target(val* self);
long core__abstract_text___core__abstract_text__StringByteView___core__abstract_collection__Collection__length(val* self);
short int core__abstract_text___core__abstract_text__StringByteView___core__abstract_collection__Collection__is_empty(val* self);
val* core__abstract_text___core__abstract_text__StringByteView___core__abstract_collection__Collection__iterator(val* self);
val* VIRTUAL_core__ropes___core__ropes__RopeBytes___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core__ropes___core__ropes__RopeBytes___core__abstract_collection__SequenceRead__iterator_from(val* self, long p0);
extern const struct class class_core__ropes__RopeBytes;
void core__flat___core__flat__FlatSubstringsIter___core__kernel__Object__init(val* self);
val* core__flat___core__flat__FlatSubstringsIter___core__abstract_collection__Iterator__item(val* self);
void core__flat___core__flat__FlatSubstringsIter___core__abstract_collection__Iterator__next(val* self);
short int core__flat___core__flat__FlatSubstringsIter___core__abstract_collection__Iterator__is_ok(val* self);
void core__flat___core__flat__FlatSubstringsIter___tgt_61d(val* self, val* p0);
val* core__flat___core__flat__FlatSubstringsIter___tgt(val* self);
extern const struct class class_core__flat__FlatSubstringsIter;
short int core___core__FlatString___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__FlatString___core__kernel__Object__hash(val* self);
short int core___core__FlatString___core__kernel__Comparable___60d(val* self, val* p0);
char* core___core__FlatString___core__abstract_text__Text__to_cstring(val* self);
long core___core__FlatText___Text__length(val* self);
val* core___core__FlatString___core__abstract_text__Text__chars(val* self);
val* core___core__FlatString___core__abstract_text__Text__substring(val* self, long p0, long p1);
uint32_t core__flat___FlatText___core__abstract_text__Text___91d_93d(val* self, long p0);
val* core___core__FlatString___core__abstract_text__Text__substring_from(val* self, long p0);
long core__flat___FlatText___core__abstract_text__Text__to_hex(val* self, val* p0, val* p1);
long core___core__FlatText___Text__bytelen(val* self);
val* core___core__FlatString___core__abstract_text__Text__substrings(val* self);
val* core___core__FlatString___core__abstract_text__Text__empty(val* self);
short int core___core__Text___is_empty(val* self);
void core__file___FlatString___Text__write_native_to(val* self, val* p0);
val* core__ropes___FlatString___core__abstract_text__String___43d(val* self, val* p0);
val* core___core__FlatString___core__abstract_text__String___42d(val* self, long p0);
void core___core__FlatString___full(val* self, char* p0, long p1, long p2, long p3);
void core___core__FlatString___with_infos(val* self, char* p0, long p1, long p2);
val* core___core__FlatString___substring_impl(val* self, long p0, long p1, long p2);
long core___core__FlatString___FlatText__first_byte(val* self);
long core__flat___FlatText___last_byte(val* self);
char* core___core__FlatText___items(val* self);
uint32_t core__flat___FlatText___fetch_char_at(val* self, long p0);
long core__flat___FlatText___char_to_byte_index(val* self, long p0);
extern const struct class class_core__FlatString;
extern const int COLOR_core__abstract_text__FlatText___length;
extern const int COLOR_core__abstract_text__FlatText___bytelen;
extern const int COLOR_core__flat__FlatText___position;
extern const int COLOR_core__flat__FlatText___bytepos;
void core__flat___core__flat__FlatStringCharIterator___core__kernel__Object__init(val* self);
val* VIRTUAL_core__flat___core__flat__FlatStringCharIterator___core__abstract_collection__Iterator__item(val* self);
void core__flat___core__flat__FlatStringCharIterator___core__abstract_collection__Iterator__next(val* self);
short int core__flat___core__flat__FlatStringCharIterator___core__abstract_collection__Iterator__is_ok(val* self);
long core__flat___core__flat__FlatStringCharIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__flat___core__flat__FlatStringCharIterator___target_61d(val* self, val* p0);
void core__flat___core__flat__FlatStringCharIterator___curr_pos_61d(val* self, long p0);
void core__flat___core__flat__FlatStringCharIterator___max_61d(val* self, long p0);
val* core__flat___core__flat__FlatStringCharIterator___target(val* self);
long core__flat___core__flat__FlatStringCharIterator___curr_pos(val* self);
long core__flat___core__flat__FlatStringCharIterator___max(val* self);
extern const struct class class_core__flat__FlatStringCharIterator;
val* VIRTUAL_core__flat___core__flat__FlatStringCharView___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core__flat___core__flat__FlatStringCharView___core__abstract_collection__SequenceRead__iterator_from(val* self, long p0);
extern const struct class class_core__flat__FlatStringCharView;
void core__flat___core__flat__FlatStringByteIterator___core__kernel__Object__init(val* self);
val* VIRTUAL_core__flat___core__flat__FlatStringByteIterator___core__abstract_collection__Iterator__item(val* self);
void core__flat___core__flat__FlatStringByteIterator___core__abstract_collection__Iterator__next(val* self);
short int core__flat___core__flat__FlatStringByteIterator___core__abstract_collection__Iterator__is_ok(val* self);
long core__flat___core__flat__FlatStringByteIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__flat___core__flat__FlatStringByteIterator___target_61d(val* self, val* p0);
void core__flat___core__flat__FlatStringByteIterator___curr_pos_61d(val* self, long p0);
val* core__flat___core__flat__FlatStringByteIterator___target(val* self);
void core__flat___core__flat__FlatStringByteIterator___target_items_61d(val* self, char* p0);
long core__flat___core__flat__FlatStringByteIterator___curr_pos(val* self);
char* core__flat___core__flat__FlatStringByteIterator___target_items(val* self);
extern const struct class class_core__flat__FlatStringByteIterator;
val* VIRTUAL_core__flat___core__flat__FlatStringByteView___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core__flat___core__flat__FlatStringByteView___core__abstract_collection__SequenceRead__iterator_from(val* self, long p0);
extern const struct class class_core__flat__FlatStringByteView;
void core___core__FlatBuffer___core__kernel__Object__init(val* self);
val* core___core__FlatBuffer___core__abstract_text__Object__to_s(val* self);
long core___core__Buffer___core__kernel__Object__hash(val* self);
char* core___core__FlatBuffer___core__abstract_text__Text__to_cstring(val* self);
val* core___core__FlatBuffer___core__abstract_text__Text__chars(val* self);
val* core___core__FlatBuffer___core__abstract_text__Text__substring(val* self, long p0, long p1);
val* core___core__FlatBuffer___core__abstract_text__Text__substrings(val* self);
val* core___core__FlatBuffer___core__abstract_text__Text__empty(val* self);
val* core__flat___Buffer___new(val* self);
void core___core__FlatBuffer___core__abstract_text__Buffer__append(val* self, val* p0);
short int core___core__Buffer___is_dirty(val* self);
void core___core__Buffer___is_dirty_61d(val* self, short int p0);
void core___core__Buffer___written_61d(val* self, short int p0);
void core___core__FlatBuffer___core__abstract_text__Buffer__enlarge(val* self, long p0);
void core___core__FlatBuffer___core__abstract_text__Buffer__add(val* self, uint32_t p0);
short int core___core__Buffer___written(val* self);
void core___core__FlatBuffer___core__abstract_text__Buffer___91d_93d_61d(val* self, long p0, uint32_t p1);
long core__flat___FlatText___first_byte(val* self);
void core___core__FlatBuffer___real_items_61d(val* self, char* p0);
char* core___core__FlatBuffer___real_items(val* self);
void core___core__FlatBuffer___with_infos(val* self, char* p0, long p1, long p2, long p3);
void core___core__FlatBuffer___capacity_61d(val* self, long p0);
long core___core__FlatBuffer___capacity(val* self);
void core___core__FlatBuffer___from(val* self, val* p0);
void core___core__FlatBuffer___reset(val* self);
void core___core__FlatBuffer___rshift_bytes(val* self, long p0, long p1);
void core___core__FlatBuffer___lshift_bytes(val* self, long p0, long p1);
extern const struct class class_core__FlatBuffer;
extern const int COLOR_core__abstract_text__Buffer___is_dirty;
extern const int COLOR_core__abstract_text__Buffer___written;
extern const int COLOR_core__flat__FlatBuffer___char_cache;
extern const int COLOR_core__flat__FlatBuffer___byte_cache;
extern const int COLOR_core__flat__FlatBuffer___capacity;
val* VIRTUAL_core__flat___core__flat__FlatBufferByteView___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core__flat___core__flat__FlatBufferByteView___core__abstract_collection__SequenceRead__iterator_from(val* self, long p0);
extern const struct class class_core__flat__FlatBufferByteView;
void core__flat___core__flat__FlatBufferByteIterator___core__kernel__Object__init(val* self);
val* VIRTUAL_core__flat___core__flat__FlatBufferByteIterator___core__abstract_collection__Iterator__item(val* self);
void core__flat___core__flat__FlatBufferByteIterator___core__abstract_collection__Iterator__next(val* self);
short int core__flat___core__flat__FlatBufferByteIterator___core__abstract_collection__Iterator__is_ok(val* self);
long core__flat___core__flat__FlatBufferByteIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__flat___core__flat__FlatBufferByteIterator___target_61d(val* self, val* p0);
void core__flat___core__flat__FlatBufferByteIterator___curr_pos_61d(val* self, long p0);
void core__flat___core__flat__FlatBufferByteIterator___target_items_61d(val* self, char* p0);
val* core__flat___core__flat__FlatBufferByteIterator___target(val* self);
char* core__flat___core__flat__FlatBufferByteIterator___target_items(val* self);
long core__flat___core__flat__FlatBufferByteIterator___curr_pos(val* self);
extern const struct class class_core__flat__FlatBufferByteIterator;
val* VIRTUAL_core__flat___core__flat__FlatBufferCharView___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core__flat___core__flat__FlatBufferCharView___core__abstract_collection__SequenceRead__iterator_from(val* self, long p0);
void VIRTUAL_core__flat___core__flat__FlatBufferCharView___core__abstract_collection__Sequence__push(val* self, val* p0);
void VIRTUAL_core__flat___core__flat__FlatBufferCharView___core__abstract_collection__Sequence___91d_93d_61d(val* self, long p0, val* p1);
void VIRTUAL_core__flat___core__flat__FlatBufferCharView___core__abstract_collection__SimpleCollection__add(val* self, val* p0);
void core___core__SimpleCollection___add_all(val* self, val* p0);
val* core__collection___Sequence___subarray(val* self, long p0, long p1);
extern const struct class class_core__flat__FlatBufferCharView;
void core__flat___core__flat__FlatBufferCharIterator___core__kernel__Object__init(val* self);
val* VIRTUAL_core__flat___core__flat__FlatBufferCharIterator___core__abstract_collection__Iterator__item(val* self);
void core__flat___core__flat__FlatBufferCharIterator___core__abstract_collection__Iterator__next(val* self);
short int core__flat___core__flat__FlatBufferCharIterator___core__abstract_collection__Iterator__is_ok(val* self);
long core__flat___core__flat__FlatBufferCharIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__flat___core__flat__FlatBufferCharIterator___target_61d(val* self, val* p0);
void core__flat___core__flat__FlatBufferCharIterator___curr_pos_61d(val* self, long p0);
void core__flat___core__flat__FlatBufferCharIterator___max_61d(val* self, long p0);
val* core__flat___core__flat__FlatBufferCharIterator___target(val* self);
long core__flat___core__flat__FlatBufferCharIterator___curr_pos(val* self);
long core__flat___core__flat__FlatBufferCharIterator___max(val* self);
extern const struct class class_core__flat__FlatBufferCharIterator;
extern const struct class class_core__String;
char* core___core__Text___to_cstring(val* self);
long core___core__Text___length(val* self);
val* core___core__Buffer___Text__chars(val* self);
val* core___core__Text___substring(val* self, long p0, long p1);
uint32_t core___core__Text____91d_93d(val* self, long p0);
long core___core__Text___bytelen(val* self);
val* core___core__Text___substrings(val* self);
val* core___core__Text___empty(val* self);
void core___core__Buffer___append(val* self, val* p0);
void core___core__Buffer___enlarge(val* self, long p0);
void core___core__Buffer___add(val* self, uint32_t p0);
void core___core__Buffer____91d_93d_61d(val* self, long p0, uint32_t p1);
extern const struct class class_core__Buffer;
short int VIRTUAL_core___core__NativeString___core__kernel__Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__NativeString___core__kernel__Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core__flat___NativeString___core__abstract_text__Object__to_s(val* self);
short int core___core__Pointer___address_is_null(val* self);
void core___core__Pointer___free(val* self);
val* c___c__NativeCArray____91d_93d(val* self, long p0);
void c___c__NativeCArray____91d_93d_61d(val* self, long p0, val* p1);
char* core___core__NativeString___new(char* self, long p0);
val* core__flat___NativeString___to_s_full(char* self, long p0, long p1);
char* core__environ___NativeString___get_environ(char* self);
void core___core__NativeString___copy_to(char* self, char* p0, long p1, long p2, long p3);
void core___core__NativeString____91d_93d_61d(char* self, long p0, unsigned char p1);
val* core__flat___NativeString___to_s_with_length(char* self, long p0);
long core___core__NativeString___cstring_length(char* self);
val* core__flat___NativeString___to_s_unsafe(char* self, val* p0);
unsigned char core___core__NativeString____91d_93d(char* self, long p0);
val* core__flat___NativeString___clean_utf8(char* self, long p0);
uint32_t core___core__NativeString___char_at(char* self, long p0);
long core___core__NativeString___utf8_length(char* self, long p0, long p1);
long core___core__NativeString___fetch_95d4_chars(char* self, long p0);
long core___core__NativeString___length_of_char_at(char* self, long p0);
long core___core__NativeString___fetch_95d4_hchars(char* self, long p0);
long core___core__NativeString___find_beginning_of_char_at(char* self, long p0);
long core___core__NativeString___char_to_byte_index_cached(char* self, long p0, long p1, long p2);
long core___core__NativeString___char_to_byte_index(char* self, long p0);
void core__flat___NativeString___set_char_at(char* self, long p0, uint32_t p1);
void core__flat___NativeString___native_set_char(char* self, long p0, uint32_t p1, long p2);
extern const struct type type_core__NativeString;
extern const struct class class_core__NativeString;
void core__environ___Sys___core__kernel__Object__init(val* self);
val* core__utf8___Sys___utf8_decoder(val* self);
val* core__utf8___Sys___utf8_coder(val* self);
void gamnit___core__Sys___run(val* self);
void core__math___Sys___srand_from(val* self, long p0);
long core__file___Sys___buffer_mode_line(val* self);
void core___core__Sys___exit(val* self, long p0);
void core__math___Sys___srand(val* self);
long core___core__Sys___errno(val* self);
void app__app_base___core__Sys___main(val* self);
val* app__app_base___core__Sys___app(val* self);
long core__ropes___Sys___maxlen(val* self);
val* core__abstract_text___Sys___program_name(val* self);
char* core__abstract_text___Sys___native_argv(val* self, long p0);
val* glesv2___core__Sys___glGetError(val* self);
val* glesv2___core__Sys___gl_NO_ERROR(val* self);
void core__file___Sys___print(val* self, val* p0);
void core__file___Sys___print_error(val* self, val* p0);
val* glesv2___core__Sys___gl(val* self);
void glesv2___core__Sys___glBlendFunc(val* self, val* p0, val* p1);
val* glesv2___core__Sys___gl_SRC_ALPHA(val* self);
val* glesv2___core__Sys___gl_ONE_MINUS_SRC_ALPHA(val* self);
void glesv2___core__Sys___glDepthFunc(val* self, val* p0);
val* glesv2___core__Sys___gl_LEQUAL(val* self);
void glesv2___core__Sys___glDepthMask(val* self, short int p0);
void glesv2___core__Sys___glViewport(val* self, long p0, long p1, long p2, long p3);
void glesv2___core__Sys___glClearColor(val* self, double p0, double p1, double p2, double p3);
val* gamnit__textures___core__Sys___all_root_textures(val* self);
void glesv2___core__Sys___glTexParameteri(val* self, val* p0, val* p1, val* p2);
val* glesv2___core__Sys___gl_TEXTURE_95d2D(val* self);
val* glesv2___core__Sys___gl_TEXTURE_MIN_FILTER(val* self);
val* glesv2___core__Sys___gl_LINEAR(val* self);
val* glesv2___core__Sys___gl_TEXTURE_MAG_FILTER(val* self);
long glesv2___core__Sys___glGetProgramiv(val* self, val* p0, val* p1);
val* glesv2___core__Sys___gl_ACTIVE_ATTRIBUTE_MAX_LENGTH(val* self);
val* glesv2___core__Sys___gl_ACTIVE_UNIFORM_MAX_LENGTH(val* self);
val* core__file___Sys___stdout(val* self);
val* glesv2___core__Sys___glCreateProgram(val* self);
short int glesv2___core__Sys___glIsProgram(val* self, val* p0);
void glesv2___core__Sys___glAttachShader(val* self, val* p0, val* p1);
val* gamnit__programs___core__Sys___gammit_gl_error(val* self);
void glesv2___core__Sys___glLinkProgram(val* self, val* p0);
val* glesv2___core__Sys___glGetProgramInfoLog(val* self, val* p0);
val* glesv2___core__Sys___gl_ACTIVE_ATTRIBUTES(val* self);
val* glesv2___core__Sys___gl_FLOAT(val* self);
val* glesv2___core__Sys___gl_FLOAT_VEC2(val* self);
val* glesv2___core__Sys___gl_FLOAT_VEC3(val* self);
val* glesv2___core__Sys___gl_FLOAT_VEC4(val* self);
val* glesv2___core__Sys___gl_ACTIVE_UNIFORMS(val* self);
val* glesv2___core__Sys___gl_BOOL(val* self);
val* glesv2___core__Sys___gl_SAMPLER_95d2D(val* self);
val* glesv2___core__Sys___gl_FLOAT_MAT4(val* self);
val* core__file___Sys___stderr(val* self);
val* glesv2___core__Sys___gles(val* self);
void glesv2___core__Sys___glClear(val* self, val* p0);
val* glesv2___core__Sys___gl_COLOR_BUFFER_BIT(val* self);
val* glesv2___core__Sys___gl_DEPTH_BUFFER_BIT(val* self);
short int gamnit__display___core__Sys___debug_gamnit(val* self);
val* glesv2___core__Sys___gl_INVALID_ENUM(val* self);
val* glesv2___core__Sys___gl_INVALID_VALUE(val* self);
val* glesv2___core__Sys___gl_INVALID_OPERATION(val* self);
val* glesv2___core__Sys___gl_INVALID_FRAMEBUFFER_OPERATION(val* self);
val* glesv2___core__Sys___gl_OUT_OF_MEMORY(val* self);
val* glesv2___core__Sys___glCreateShader(val* self, val* p0);
short int glesv2___core__Sys___glIsShader(val* self, val* p0);
void glesv2___core__Sys___glShaderSource(val* self, val* p0, char* p1);
void glesv2___core__Sys___glCompileShader(val* self, val* p0);
val* glesv2___core__Sys___glGetShaderInfoLog(val* self, val* p0);
val* glesv2___core__Sys___gl_LINK_STATUS(val* self);
val* glesv2___core__Sys___gl_INFO_LOG_LENGTH(val* self);
long glesv2___core__Sys___native_glGetProgramInfoLog(val* self, val* p0, long p1, char* p2);
val* x11___core__Sys___x_open_default_display(val* self);
short int egl___core__Sys___egl_bind_opengl_es_api(val* self);
val* glesv2___core__Sys___gl_VERTEX_SHADER(val* self);
val* glesv2___core__Sys___gl_FRAGMENT_SHADER(val* self);
long glesv2___core__Sys___glGetShaderiv(val* self, val* p0, val* p1);
val* glesv2___core__Sys___gl_COMPILE_STATUS(val* self);
long glesv2___core__Sys___native_glGetShaderInfoLog(val* self, val* p0, long p1, char* p2);
val* glesv2___core__Sys___gl_RGBA(val* self);
val* glesv2___core__Sys___gl_RGB(val* self);
long glesv2___core__Sys___glGetIntegerv(val* self, val* p0);
val* glesv2___core__Sys___gl_MAX_TEXTURE_SIZE(val* self);
void glesv2___core__Sys___glPixelStorei(val* self, val* p0, long p1);
val* glesv2___core__Sys___gl_UNPACK_ALIGNEMENT(val* self);
val* glesv2___core__Sys___glGenTextures(val* self, long p0);
void glesv2___core__Sys___glBindTexture(val* self, val* p0, long p1);
void glesv2___core__Sys___glTexImage2D(val* self, val* p0, long p1, val* p2, long p3, long p4, long p5, val* p6, val* p7, val* p8);
val* glesv2___core__Sys___gl_UNSIGNED_BYTE(val* self);
void glesv2___core__Sys___glHint(val* self, val* p0, val* p1);
val* glesv2___core__Sys___gl_GENERATE_MIPMAP_HINT(val* self);
val* glesv2___core__Sys___gl_NICEST(val* self);
void glesv2___core__Sys___glGenerateMipmap(val* self, val* p0);
void glesv2___core__Sys___glUseProgram(val* self, val* p0);
void glesv2___core__Sys___glEnableVertexAttribArray(val* self, long p0);
void glesv2___core__Sys___glDisableVertexAttribArray(val* self, long p0);
double core__math___Sys___pi(val* self);
void glesv2___core__Sys___glActiveTexture(val* self, val* p0);
val* glesv2___core__Sys___gl_TEXTURE0(val* self);
void glesv2___core__Sys___glDrawArrays(val* self, val* p0, long p1, long p2);
val* glesv2___core__Sys___gl_TRIANGLE_STRIP(val* self);
void glesv2___core__Sys___native_glGenTextures(val* self, long p0, val* p1);
void glesv2___core__Sys___glVertexAttrib4f(val* self, long p0, double p1, double p2, double p3, double p4);
void glesv2___core__Sys___glVertexAttrib1f(val* self, long p0, double p1);
void glesv2___core__Sys___glVertexAttribPointer(val* self, long p0, long p1, val* p2, short int p3, long p4, val* p5);
void core__math___Sys___core__kernel__Object__init(val* self);
void core___core__Sys___run(val* self);
extern const struct class class_core__Sys;
val* NEW_gamnit__TextureSet(const struct type* type);
extern const struct type type_gamnit__TextureSet;
extern const int COLOR_gamnit__textures__Sys___all_root_textures;
short int VIRTUAL_core___core__Bool___Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Bool___Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core__abstract_text___Bool___Object__to_s(val* self);
long VIRTUAL_core___core__Bool___Object__hash(val* self);
long VIRTUAL_core___core__Bool___Object__object_id(val* self);
long core___core__Bool___to_i(short int self);
short int VIRTUAL_core___core__Float___Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Float___Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core__abstract_text___Float___Object__to_s(val* self);
long VIRTUAL_core___core__Float___Object__object_id(val* self);
short int VIRTUAL_core___core__Float___Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Float___Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Float___Comparable___60d(val* self, val* p0);
short int VIRTUAL_core___core__Float___Comparable___62d(val* self, val* p0);
val* VIRTUAL_core___core__Float___Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Float___Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Float___Numeric__unary_32d_45d(val* self);
val* core__abstract_text___Float___to_precision(double self, long p0);
long core__math___Float___is_inf(double self);
short int core__math___Float___is_nan(double self);
long VIRTUAL_core___core__Float___Numeric__to_i(val* self);
val* VIRTUAL_core___core__Float___Numeric___47d(val* self, val* p0);
val* VIRTUAL_core___core__Float___Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Float___Numeric__to_b(val* self);
int8_t VIRTUAL_core__fixed_ints___Float___Numeric__to_i8(val* self);
int16_t VIRTUAL_core__fixed_ints___Float___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core__fixed_ints___Float___Numeric__to_u16(val* self);
int32_t VIRTUAL_core__fixed_ints___Float___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core__fixed_ints___Float___Numeric__to_u32(val* self);
double VIRTUAL_core___core__Float___Numeric__to_f(val* self);
val* VIRTUAL_core___core__Float___Numeric__zero(val* self);
short int core__math___Float___native_is_inf(double self);
double core__math___Float___tan(double self);
double core__math___Float___rand(double self);
void core__time___Float___sleep(double self);
double core__math___Float___pow(double self, double p0);
double core__math___Float___sqrt(double self);
double core__math___Float___sin(double self);
double core__math___Float___cos(double self);
double core__math___Float___abs(double self);
extern const struct type type_core__Float;
extern const struct class class_core__Float;
short int VIRTUAL_core___core__Byte___Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Byte___Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core__abstract_text___Byte___Object__to_s(val* self);
long VIRTUAL_core___core__Byte___Object__hash(val* self);
long VIRTUAL_core___core__Byte___Object__object_id(val* self);
short int VIRTUAL_core___core__Byte___Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Byte___Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Byte___Comparable___60d(val* self, val* p0);
short int VIRTUAL_core___core__Byte___Comparable___62d(val* self, val* p0);
val* VIRTUAL_core___core__Byte___Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Byte___Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Byte___Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__Byte___Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Byte___Discrete__distance(val* self, val* p0);
val* VIRTUAL_core___core__Byte___Discrete__predecessor(val* self, long p0);
long VIRTUAL_core___core__Byte___Numeric__to_i(val* self);
val* VIRTUAL_core___core__Byte___Numeric___47d(val* self, val* p0);
val* VIRTUAL_core___core__Byte___Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Byte___Numeric__to_b(val* self);
int8_t VIRTUAL_core__fixed_ints___Byte___Numeric__to_i8(val* self);
int16_t VIRTUAL_core__fixed_ints___Byte___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core__fixed_ints___Byte___Numeric__to_u16(val* self);
int32_t VIRTUAL_core__fixed_ints___Byte___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core__fixed_ints___Byte___Numeric__to_u32(val* self);
double VIRTUAL_core___core__Byte___Numeric__to_f(val* self);
val* VIRTUAL_core___core__Byte___Numeric__zero(val* self);
long core__abstract_text___Byte___byte_to_s_len(unsigned char self);
void core__abstract_text___Byte___native_byte_to_s(unsigned char self, char* p0, long p1);
unsigned char core__math___Byte____38d(unsigned char self, unsigned char p0);
uint32_t core___core__Byte___ascii(unsigned char self);
extern const struct type type_core__Byte;
extern const struct class class_core__Byte;
short int VIRTUAL_core___core__Int___Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int___Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core__flat___Int___core__abstract_text__Object__to_s(val* self);
long VIRTUAL_core___core__Int___Object__hash(val* self);
long VIRTUAL_core___core__Int___Object__object_id(val* self);
short int VIRTUAL_core___core__Int___Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int___Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int___Comparable___60d(val* self, val* p0);
short int VIRTUAL_core___core__Int___Comparable___62d(val* self, val* p0);
val* VIRTUAL_core___core__Int___Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Int___Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Int___Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__Int___Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Int___Discrete__distance(val* self, val* p0);
val* VIRTUAL_core___core__Int___Discrete__predecessor(val* self, long p0);
long VIRTUAL_core___core__Int___Numeric__to_i(val* self);
val* VIRTUAL_core___core__Int___Numeric___47d(val* self, val* p0);
val* VIRTUAL_core___core__Int___Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Int___Numeric__to_b(val* self);
int8_t VIRTUAL_core__fixed_ints___Int___Numeric__to_i8(val* self);
int16_t VIRTUAL_core__fixed_ints___Int___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core__fixed_ints___Int___Numeric__to_u16(val* self);
int32_t VIRTUAL_core__fixed_ints___Int___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core__fixed_ints___Int___Numeric__to_u32(val* self);
double VIRTUAL_core___core__Int___Numeric__to_f(val* self);
val* VIRTUAL_core___core__Int___Numeric__zero(val* self);
val* core__abstract_text___Int___strerror(long self);
long core__abstract_text___Int___int_to_s_len(long self);
void core__abstract_text___Int___native_int_to_s(long self, char* p0, long p1);
char* core__abstract_text___Int___strerror_ext(long self);
long core___core__Int____60d_60d(long self, long p0);
long core___core__Int___abs(long self);
val* core__abstract_text___Int___to_hex(long self);
long core__math___Int____38d(long self, long p0);
uint32_t core___core__Int___code_point(long self);
long core__math___Int____124d(long self, long p0);
long core___core__Int____62d_62d(long self, long p0);
val* core__flat___Int___to_base(long self, long p0, short int p1);
long core___core__Int____37d(long self, long p0);
long core___core__Int___digit_count(long self, long p0);
void core__abstract_text___Int___fill_buffer(long self, val* p0, long p1, short int p2);
long core___core__Int___digit_count_base_95d10(long self);
uint32_t core___core__Int___to_c(long self);
val* core__range___Int___times(long self);
short int VIRTUAL_core___core__Char___Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Char___Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core__abstract_text___Char___Object__to_s(val* self);
long VIRTUAL_core___core__Char___Object__hash(val* self);
long VIRTUAL_core___core__Char___Object__object_id(val* self);
short int VIRTUAL_core___core__Char___Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Char___Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Char___Comparable___60d(val* self, val* p0);
short int VIRTUAL_core___core__Char___Comparable___62d(val* self, val* p0);
val* VIRTUAL_core__string_search___Char___Pattern__search_in(val* self, val* p0, long p1);
long VIRTUAL_core__string_search___Char___Pattern__search_index_in(val* self, val* p0, long p1);
val* VIRTUAL_core___core__Char___Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Char___Discrete__distance(val* self, val* p0);
val* VIRTUAL_core___core__Char___Discrete__predecessor(val* self, long p0);
long core__abstract_text___Char___u8char_len(uint32_t self);
void core__abstract_text___Char___u8char_tos(uint32_t self, char* p0, long p1);
short int core__abstract_text___Char___is_numeric(uint32_t self);
long core___core__Char___code_point(uint32_t self);
long core__abstract_text___Char___from_hex(uint32_t self);
short int core__abstract_text___Char___is_hexdigit(uint32_t self);
long core___core__Char___to_i(uint32_t self);
short int core___core__Char___is_digit(uint32_t self);
uint32_t core___core__Char___to_lower(uint32_t self);
short int core___core__Char___is_upper(uint32_t self);
extern const struct type type_core__Pointer;
extern const struct class class_core__Pointer;
short int core___core__Range___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__Range___core__kernel__Object__hash(val* self);
void core___core__Range___without_last(val* self, val* p0, val* p1);
val* core___core__Range___last(val* self);
val* core___core__Range___after(val* self);
void core___core__Range___first_61d(val* self, val* p0);
long core___core__Range___core__abstract_collection__Collection__length(val* self);
short int core___core__Range___core__abstract_collection__Collection__is_empty(val* self);
val* core___core__Range___core__abstract_collection__Collection__iterator(val* self);
short int core___core__Range___core__abstract_collection__Collection__has(val* self, val* p0);
val* core___core__Range___core__abstract_collection__Collection__first(val* self);
void core___core__Range___last_61d(val* self, val* p0);
void core___core__Range___after_61d(val* self, val* p0);
extern const struct class class_core__Range;
void core__range___core__range__IteratorRange___core__kernel__Object__init(val* self);
val* core__range___core__range__IteratorRange___core__abstract_collection__Iterator__item(val* self);
void core__range___core__range__IteratorRange___core__abstract_collection__Iterator__next(val* self);
short int core__range___core__range__IteratorRange___core__abstract_collection__Iterator__is_ok(val* self);
void core__range___core__range__IteratorRange___range_61d(val* self, val* p0);
extern const struct class class_core__range__IteratorRange;
void core__abstract_collection___core__abstract_collection__RefIterator___core__kernel__Object__init(val* self);
val* core__abstract_collection___core__abstract_collection__RefIterator___Iterator__item(val* self);
void core__abstract_collection___core__abstract_collection__RefIterator___Iterator__next(val* self);
short int core__abstract_collection___core__abstract_collection__RefIterator___Iterator__is_ok(val* self);
void core__abstract_collection___core__abstract_collection__RefIterator___container_61d(val* self, val* p0);
void core__abstract_collection___core__abstract_collection__RefIterator___is_ok_61d(val* self, short int p0);
extern const struct class class_core__abstract_collection__RefIterator;
extern const int COLOR_core__abstract_collection__RefIterator___is_ok;
void core___core__MapKeysIterator___core__kernel__Object__init(val* self);
val* core___core__MapKeysIterator___Iterator__item(val* self);
void core___core__MapKeysIterator___Iterator__next(val* self);
short int core___core__MapKeysIterator___Iterator__is_ok(val* self);
void core___core__MapKeysIterator___original_iterator_61d(val* self, val* p0);
val* core___core__MapKeysIterator___original_iterator(val* self);
extern const struct class class_core__MapKeysIterator;
void core___core__MapValuesIterator___core__kernel__Object__init(val* self);
val* core___core__MapValuesIterator___Iterator__item(val* self);
void core___core__MapValuesIterator___Iterator__next(val* self);
short int core___core__MapValuesIterator___Iterator__is_ok(val* self);
void core___core__MapValuesIterator___original_iterator_61d(val* self, val* p0);
val* core___core__MapValuesIterator___original_iterator(val* self);
extern const struct class class_core__MapValuesIterator;
void core___core__List___core__kernel__Object__init(val* self);
val* core___core__List___get_node(val* self, long p0);
val* core___core__List___search_node_after(val* self, val* p0, val* p1);
void core___core__List___length_61d(val* self, long p0);
long core___core__List___core__abstract_collection__Collection__length(val* self);
short int core___core__List___core__abstract_collection__Collection__is_empty(val* self);
val* core___core__List___core__abstract_collection__Collection__iterator(val* self);
short int core___core__List___core__abstract_collection__Collection__has(val* self, val* p0);
val* core___core__List___core__abstract_collection__Collection__first(val* self);
val* core___core__List___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core___core__SequenceRead___iterator_from(val* self, long p0);
void core___core__List___core__abstract_collection__Sequence__push(val* self, val* p0);
void core___core__List___core__abstract_collection__Sequence___91d_93d_61d(val* self, long p0, val* p1);
void core___core__Sequence___SimpleCollection__add(val* self, val* p0);
extern const struct class class_core__List;
extern const int COLOR_core__list__List___length;
void core___core__ListIterator___core__kernel__Object__init(val* self);
val* core___core__ListIterator___core__abstract_collection__Iterator__item(val* self);
void core___core__ListIterator___core__abstract_collection__Iterator__next(val* self);
short int core___core__ListIterator___core__abstract_collection__Iterator__is_ok(val* self);
long core___core__ListIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core___core__ListIterator___list_61d(val* self, val* p0);
extern const struct class class_core__ListIterator;
extern const int COLOR_core__list__ListIterator___index;
void core___core__Ref___core__kernel__Object__init(val* self);
val* core___core__Ref___item(val* self);
void core___core__Ref___item_61d(val* self, val* p0);
val* core__list___core__list__ListNode___next(val* self);
long core___core__Ref___Collection__length(val* self);
short int core___core__Ref___Collection__is_empty(val* self);
val* core___core__Ref___Collection__iterator(val* self);
short int core___core__Ref___Collection__has(val* self, val* p0);
val* core___core__Ref___Collection__first(val* self);
void core__list___core__list__ListNode___next_61d(val* self, val* p0);
void core__list___core__list__ListNode___prev_61d(val* self, val* p0);
extern const struct class class_core__list__ListNode;
void core___core__Array___core__kernel__Object__init(val* self);
short int core___core__Array___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__AbstractArrayRead___core__abstract_collection__Collection__length(val* self);
short int core___core__AbstractArrayRead___core__abstract_collection__Collection__is_empty(val* self);
val* core___core__AbstractArrayRead___core__abstract_collection__Collection__iterator(val* self);
short int core___core__AbstractArrayRead___core__abstract_collection__Collection__has(val* self, val* p0);
val* core___core__Array___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
long core___core__AbstractArrayRead___core__abstract_collection__SequenceRead__last_index_of_from(val* self, val* p0, long p1);
void core___core__AbstractArray___core__abstract_collection__Sequence__push(val* self, val* p0);
void core___core__Array___core__abstract_collection__Sequence___91d_93d_61d(val* self, long p0, val* p1);
void core___core__Array___core__abstract_collection__SimpleCollection__add(val* self, val* p0);
void core___core__Array___core__abstract_collection__SimpleCollection__add_all(val* self, val* p0);
void core___core__Array___AbstractArray__enlarge(val* self, long p0);
void core___core__Array___with_native(val* self, val* p0, long p1);
val* core___core__Array___items(val* self);
void core___core__Array___with_capacity(val* self, long p0);
void core___core__Array___filled_with(val* self, val* p0, long p1);
extern const struct class class_core__Array;
extern const int COLOR_core__array__AbstractArrayRead___length;
extern const int COLOR_core__array__Array___capacity;
void core__array___core__array__ArrayIterator___core__kernel__Object__init(val* self);
val* core__array___core__array__ArrayIterator___core__abstract_collection__Iterator__item(val* self);
void core__array___core__array__ArrayIterator___core__abstract_collection__Iterator__next(val* self);
short int core__array___core__array__ArrayIterator___core__abstract_collection__Iterator__is_ok(val* self);
void core__array___core__array__ArrayIterator___core__abstract_collection__Iterator__finish(val* self);
long core__array___core__array__ArrayIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__array___core__array__ArrayIterator___array_61d(val* self, val* p0);
extern const struct class class_core__array__ArrayIterator;
extern const int COLOR_core__array__ArrayIterator___index;
val* core__flat___NativeArray___native_to_s(val* self);
val* core___core__NativeArray____91d_93d(val* self, long p0);
long core___core__NativeArray___length(val* self);
void core___core__NativeArray____91d_93d_61d(val* self, long p0, val* p1);
val* core___core__NativeArray___new(val* self, long p0);
void core___core__NativeArray___copy_to(val* self, val* p0, long p1);
extern const struct class class_core__NativeArray;
void core__hash_collection___core__hash_collection__HashMapKeys___core__kernel__Object__init(val* self);
void core__hash_collection___core__hash_collection__HashMapKeys___map_61d(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashMapKeys___map(val* self);
long core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__Collection__length(val* self);
short int core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__Collection__is_empty(val* self);
val* core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__Collection__iterator(val* self);
short int core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__Collection__has(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__Collection__first(val* self);
extern const struct class class_core__hash_collection__HashMapKeys;
void core__hash_collection___core__hash_collection__HashMapValues___core__kernel__Object__init(val* self);
void core__hash_collection___core__hash_collection__HashMapValues___map_61d(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashMapValues___map(val* self);
long core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__Collection__length(val* self);
short int core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__Collection__is_empty(val* self);
val* core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__Collection__iterator(val* self);
short int core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__Collection__has(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__Collection__first(val* self);
extern const struct class class_core__hash_collection__HashMapValues;
void core__hash_collection___core__hash_collection__HashMapNode___core__kernel__Object__init(val* self);
void core__hash_collection___core__hash_collection__HashNode___key_61d(val* self, val* p0);
void core__hash_collection___core__hash_collection__HashMapNode___value_61d(val* self, val* p0);
void core__hash_collection___core__hash_collection__HashNode___core__kernel__Object__init(val* self);
extern const struct class class_core__hash_collection__HashMapNode;
void core__hash_collection___core__hash_collection__HashMapIterator___core__kernel__Object__init(val* self);
short int core__hash_collection___core__hash_collection__HashMapIterator___core__abstract_collection__MapIterator__is_ok(val* self);
val* core__hash_collection___core__hash_collection__HashMapIterator___core__abstract_collection__MapIterator__key(val* self);
val* core__hash_collection___core__hash_collection__HashMapIterator___core__abstract_collection__MapIterator__item(val* self);
void core__hash_collection___core__hash_collection__HashMapIterator___core__abstract_collection__MapIterator__next(val* self);
void core___core__MapIterator___finish(val* self);
void core__hash_collection___core__hash_collection__HashMapIterator___map_61d(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashMapIterator___map(val* self);
extern const struct class class_core__hash_collection__HashMapIterator;
extern const struct class class_core__hash_collection__HashSetNode;
void core__hash_collection___core__hash_collection__HashSetIterator___core__kernel__Object__init(val* self);
val* core__hash_collection___core__hash_collection__HashSetIterator___core__abstract_collection__Iterator__item(val* self);
void core__hash_collection___core__hash_collection__HashSetIterator___core__abstract_collection__Iterator__next(val* self);
short int core__hash_collection___core__hash_collection__HashSetIterator___core__abstract_collection__Iterator__is_ok(val* self);
void core__hash_collection___core__hash_collection__HashSetIterator___set_61d(val* self, val* p0);
extern const struct class class_core__hash_collection__HashSetIterator;
void core___core__Match___core__kernel__Object__init(val* self);
val* core___core__Match___core__abstract_text__Object__to_s(val* self);
long core___core__Match___from(val* self);
void core___core__Match___string_61d(val* self, val* p0);
void core___core__Match___from_61d(val* self, long p0);
void core___core__Match___length_61d(val* self, long p0);
long core___core__Match___after(val* self);
long core___core__Match___length(val* self);
val* core___core__Match___string(val* self);
extern const struct class class_core__Match;
void core___core__Stdin___core__kernel__Object__init(val* self);
void core___core__Stream___last_error_61d(val* self, val* p0);
val* core___core__Stream___last_error(val* self);
void core___core__FileStream___path_61d(val* self, val* p0);
void core___core__FileStream___set_buffering_mode(val* self, long p0, long p1);
void core___core__BufferedReader___prepare_buffer(val* self, long p0);
extern const struct class class_core__Stdin;
extern const int COLOR_core__utf8__Sys__utf8_decoder;
extern const int COLOR_core__stream__Reader___decoder;
extern const int COLOR_core__stream__BufferedReader___buffer;
extern const int COLOR_core__stream__BufferedReader___buffer_pos;
extern const int COLOR_core__stream__BufferedReader___buffer_length;
extern const int COLOR_core__stream__BufferedReader___buffer_capacity;
extern const int COLOR_core__file__FileReader___end_reached;
void core___core__Stdout___core__kernel__Object__init(val* self);
void core___core__FileWriter___core__stream__Writer__write(val* self, val* p0);
void core___core__FileWriter___write_native(val* self, char* p0, long p1, long p2);
extern const struct class class_core__Stdout;
extern const int COLOR_core__utf8__Sys__utf8_coder;
extern const int COLOR_core__stream__Writer___coder;
extern const int COLOR_core__file__FileWriter___is_writable;
void core___core__Stderr___core__kernel__Object__init(val* self);
extern const struct class class_core__Stderr;
val* core__file___core__file__NativeFile___native_stdin(val* self);
val* core__file___core__file__NativeFile___native_stdout(val* self);
val* core__file___core__file__NativeFile___native_stderr(val* self);
long core__file___core__file__NativeFile___set_buffering_type(val* self, long p0, long p1);
long core__file___core__file__NativeFile___io_write(val* self, char* p0, long p1, long p2);
extern const struct class class_core__file__NativeFile;
void core___core__Error___core__kernel__Object__init(val* self);
val* core___core__Error___core__abstract_text__Object__to_s(val* self);
void core___core__Error___message_61d(val* self, val* p0);
val* core___core__Error___message(val* self);
extern const struct class class_core__IOError;
extern const struct class class_core__Error;
extern const struct class class_core__utf8__UTF8Coder;
extern const struct class class_core__utf8__UTF8Decoder;
short int VIRTUAL_core___core__Int8___core__kernel__Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int8___core__kernel__Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core___core__Int8___core__abstract_text__Object__to_s(val* self);
long VIRTUAL_core___core__Int8___core__kernel__Object__hash(val* self);
long VIRTUAL_core___core__Int8___core__kernel__Object__object_id(val* self);
short int VIRTUAL_core___core__Int8___core__kernel__Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int8___core__kernel__Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int8___core__kernel__Comparable___60d(val* self, val* p0);
short int VIRTUAL_core___core__Int8___core__kernel__Comparable___62d(val* self, val* p0);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__Int8___core__kernel__Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Int8___core__kernel__Discrete__distance(val* self, val* p0);
val* VIRTUAL_core___core__Int8___core__kernel__Discrete__predecessor(val* self, long p0);
long VIRTUAL_core___core__Int8___core__kernel__Numeric__to_i(val* self);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric___47d(val* self, val* p0);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Int8___core__kernel__Numeric__to_b(val* self);
int8_t VIRTUAL_core___core__Int8___Numeric__to_i8(val* self);
int16_t VIRTUAL_core___core__Int8___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core___core__Int8___Numeric__to_u16(val* self);
int32_t VIRTUAL_core___core__Int8___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core___core__Int8___Numeric__to_u32(val* self);
double VIRTUAL_core___core__Int8___core__kernel__Numeric__to_f(val* self);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric__zero(val* self);
long core___core__Int8___to_s_len(int8_t self);
void core___core__Int8___native_to_s(int8_t self, char* p0, long p1);
extern const struct type type_core__Int8;
extern const struct class class_core__Int8;
short int VIRTUAL_core___core__Int16___core__kernel__Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int16___core__kernel__Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core___core__Int16___core__abstract_text__Object__to_s(val* self);
long VIRTUAL_core___core__Int16___core__kernel__Object__hash(val* self);
long VIRTUAL_core___core__Int16___core__kernel__Object__object_id(val* self);
short int VIRTUAL_core___core__Int16___core__kernel__Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int16___core__kernel__Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int16___core__kernel__Comparable___60d(val* self, val* p0);
short int VIRTUAL_core___core__Int16___core__kernel__Comparable___62d(val* self, val* p0);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__Int16___core__kernel__Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Int16___core__kernel__Discrete__distance(val* self, val* p0);
val* VIRTUAL_core___core__Int16___core__kernel__Discrete__predecessor(val* self, long p0);
long VIRTUAL_core___core__Int16___core__kernel__Numeric__to_i(val* self);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric___47d(val* self, val* p0);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Int16___core__kernel__Numeric__to_b(val* self);
int8_t VIRTUAL_core___core__Int16___Numeric__to_i8(val* self);
int16_t VIRTUAL_core___core__Int16___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core___core__Int16___Numeric__to_u16(val* self);
int32_t VIRTUAL_core___core__Int16___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core___core__Int16___Numeric__to_u32(val* self);
double VIRTUAL_core___core__Int16___core__kernel__Numeric__to_f(val* self);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric__zero(val* self);
long core___core__Int16___to_s_len(int16_t self);
void core___core__Int16___native_to_s(int16_t self, char* p0, long p1);
extern const struct type type_core__Int16;
extern const struct class class_core__Int16;
short int VIRTUAL_core___core__UInt16___core__kernel__Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__UInt16___core__kernel__Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core___core__UInt16___core__abstract_text__Object__to_s(val* self);
long VIRTUAL_core___core__UInt16___core__kernel__Object__hash(val* self);
long VIRTUAL_core___core__UInt16___core__kernel__Object__object_id(val* self);
short int VIRTUAL_core___core__UInt16___core__kernel__Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__UInt16___core__kernel__Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__UInt16___core__kernel__Comparable___60d(val* self, val* p0);
short int VIRTUAL_core___core__UInt16___core__kernel__Comparable___62d(val* self, val* p0);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__UInt16___core__kernel__Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__UInt16___core__kernel__Discrete__distance(val* self, val* p0);
val* VIRTUAL_core___core__UInt16___core__kernel__Discrete__predecessor(val* self, long p0);
long VIRTUAL_core___core__UInt16___core__kernel__Numeric__to_i(val* self);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric___47d(val* self, val* p0);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__UInt16___core__kernel__Numeric__to_b(val* self);
int8_t VIRTUAL_core___core__UInt16___Numeric__to_i8(val* self);
int16_t VIRTUAL_core___core__UInt16___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core___core__UInt16___Numeric__to_u16(val* self);
int32_t VIRTUAL_core___core__UInt16___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core___core__UInt16___Numeric__to_u32(val* self);
double VIRTUAL_core___core__UInt16___core__kernel__Numeric__to_f(val* self);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric__zero(val* self);
long core___core__UInt16___to_s_len(uint16_t self);
void core___core__UInt16___native_to_s(uint16_t self, char* p0, long p1);
extern const struct type type_core__UInt16;
extern const struct class class_core__UInt16;
short int VIRTUAL_core___core__Int32___core__kernel__Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int32___core__kernel__Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core___core__Int32___core__abstract_text__Object__to_s(val* self);
long VIRTUAL_core___core__Int32___core__kernel__Object__hash(val* self);
long VIRTUAL_core___core__Int32___core__kernel__Object__object_id(val* self);
short int VIRTUAL_core___core__Int32___core__kernel__Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int32___core__kernel__Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int32___core__kernel__Comparable___60d(val* self, val* p0);
short int VIRTUAL_core___core__Int32___core__kernel__Comparable___62d(val* self, val* p0);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__Int32___core__kernel__Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Int32___core__kernel__Discrete__distance(val* self, val* p0);
val* VIRTUAL_core___core__Int32___core__kernel__Discrete__predecessor(val* self, long p0);
long VIRTUAL_core___core__Int32___core__kernel__Numeric__to_i(val* self);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric___47d(val* self, val* p0);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Int32___core__kernel__Numeric__to_b(val* self);
int8_t VIRTUAL_core___core__Int32___Numeric__to_i8(val* self);
int16_t VIRTUAL_core___core__Int32___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core___core__Int32___Numeric__to_u16(val* self);
int32_t VIRTUAL_core___core__Int32___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core___core__Int32___Numeric__to_u32(val* self);
double VIRTUAL_core___core__Int32___core__kernel__Numeric__to_f(val* self);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric__zero(val* self);
long core___core__Int32___to_s_len(int32_t self);
void core___core__Int32___native_to_s(int32_t self, char* p0, long p1);
extern const struct type type_core__Int32;
extern const struct class class_core__Int32;
short int VIRTUAL_core___core__UInt32___core__kernel__Object___33d_61d(val* self, val* p0);
short int VIRTUAL_core___core__UInt32___core__kernel__Object___61d_61d(val* self, val* p0);
val* VIRTUAL_core___core__UInt32___core__abstract_text__Object__to_s(val* self);
long VIRTUAL_core___core__UInt32___core__kernel__Object__hash(val* self);
long VIRTUAL_core___core__UInt32___core__kernel__Object__object_id(val* self);
short int VIRTUAL_core___core__UInt32___core__kernel__Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__UInt32___core__kernel__Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__UInt32___core__kernel__Comparable___60d(val* self, val* p0);
short int VIRTUAL_core___core__UInt32___core__kernel__Comparable___62d(val* self, val* p0);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__UInt32___core__kernel__Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__UInt32___core__kernel__Discrete__distance(val* self, val* p0);
val* VIRTUAL_core___core__UInt32___core__kernel__Discrete__predecessor(val* self, long p0);
long VIRTUAL_core___core__UInt32___core__kernel__Numeric__to_i(val* self);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric___47d(val* self, val* p0);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__UInt32___core__kernel__Numeric__to_b(val* self);
int8_t VIRTUAL_core___core__UInt32___Numeric__to_i8(val* self);
int16_t VIRTUAL_core___core__UInt32___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core___core__UInt32___Numeric__to_u16(val* self);
int32_t VIRTUAL_core___core__UInt32___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core___core__UInt32___Numeric__to_u32(val* self);
double VIRTUAL_core___core__UInt32___core__kernel__Numeric__to_f(val* self);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric__zero(val* self);
long core___core__UInt32___to_s_len(uint32_t self);
void core___core__UInt32___native_to_s(uint32_t self, char* p0, long p1);
extern const struct type type_core__UInt32;
extern const struct class class_core__UInt32;
void physique___physique__Dimensions_95d2d___core__kernel__Object__init(val* self);
void physique___physique__Dimensions_95d2d___height_61d(val* self, double p0);
void physique___physique__Dimensions_95d2d___width_61d(val* self, double p0);
double physique___physique__Dimensions_95d2d___height(val* self);
double physique___physique__Dimensions_95d2d___width(val* self);
extern const struct class class_physique__Dimensions_95d2d;
void physique___physique__Vector_95d2d___core__kernel__Object__init(val* self);
void physique___physique__Vector_95d2d___v_x_61d(val* self, double p0);
void physique___physique__Vector_95d2d___v_y_61d(val* self, double p0);
double physique___physique__Vector_95d2d___v_x(val* self);
double physique___physique__Vector_95d2d___v_y(val* self);
void physique___physique__Vector_95d2d___intensify(val* self, double p0);
void physique___physique__Vector_95d2d___add(val* self, val* p0);
val* physique___physique__Vector_95d2d___get_normalized_vector(val* self);
double physique___physique__Vector_95d2d___length(val* self);
extern const struct class class_physique__Vector_95d2d;
void physique___physique__Collision___check_collision(val* self, val* p0, val* p1);
void physique___physique__Collision___resolve_collision(val* self, val* p0, val* p1);
void physique___physique__Collision___vectorial_behaviour(val* self, val* p0, val* p1);
extern const struct class class_physique__Collision;
void physique___physique__Gravity___core__kernel__Object__init(val* self);
void physique___physique__Force___intensity_61d(val* self, double p0);
void physique___physique__Force___vector_61d(val* self, val* p0);
void physique___physique__Gravity___Force__apply_force(val* self, val* p0);
val* physique___physique__Force___vector(val* self);
double physique___physique__Force___intensity(val* self);
void physique___physique__Force___core__kernel__Object__init(val* self);
extern const struct class class_physique__Gravity;
void physique___physique__Polygone___core__kernel__Object__init(val* self);
void physique___physique__Entity___position_61d(val* self, val* p0);
void physique___physique__Entity___texture_61d(val* self, val* p0);
void physique___physique__Entity___set_dimensions(val* self, val* p0);
void physique___physique__Entity___set_vector(val* self, val* p0);
val* physique___physique__Entity___texture(val* self);
val* physique___physique__Entity___position(val* self);
void physique___physique__Entity___is_dynamic_61d(val* self, short int p0);
void physique___physique__Entity___is_moovable_61d(val* self, short int p0);
val* physique___physique__Entity___dimensions(val* self);
val* physique___physique__Entity___vector(val* self);
void physique___physique__Entity___vector_61d(val* self, val* p0);
void physique___physique__Entity___dimensions_61d(val* self, val* p0);
void physique___physique__Entity___mass_61d(val* self, double p0);
void physique___physique__Entity___update(val* self, double p0);
void physique___physique__Entity___update_position(val* self);
short int physique___physique__Entity___is_dynamic(val* self);
void physique___physique__Entity___play_back(val* self);
void physique___physique__Polygone___Shape__compute_volume(val* self);
void physique___physique__Shape___compute_mass(val* self);
void physique___physique__Shape___volume_61d(val* self, double p0);
double physique___physique__Shape___density(val* self);
double physique___physique__Shape___volume(val* self);
void physique___physique__Entity___core__kernel__Object__init(val* self);
void physique___physique__Polygone___compute_vertices(val* self);
val* physique___physique__Polygone___vertices(val* self);
void physique___physique__Shape___core__kernel__Object__init(val* self);
extern const struct class class_physique__Polygone;
extern const int COLOR_physique__nitSimulation__Entity___is_colision;
extern const int COLOR_physique__nitSimulation__Shape___density;
extern const struct type type_core__Array__geometry__Point3d__core__Float;
extern const int COLOR_physique__nitSimulation__Polygone___vertices;
void physique___physique__Circle___core__kernel__Object__init(val* self);
void physique___physique__Circle___Shape__compute_volume(val* self);
void physique___physique__Circle___set_elasticity(val* self, double p0);
void physique___physique__Circle___radius_61d(val* self, double p0);
void physique___physique__Circle___coef_elas_61d(val* self, double p0);
double physique___physique__Circle___radius(val* self);
double physique___physique__Circle___distance_topoint(val* self, val* p0);
double physique___physique__Circle___coef_elas(val* self);
extern const struct class class_physique__Circle;
void physique___physique__Player___core__kernel__Object__init(val* self);
void physique___physique__Player___Entity__update_position(val* self);
void physique___physique__Player___name_61d(val* self, val* p0);
val* physique___physique__Player___name(val* self);
void physique___physique__Player___check_limit(val* self);
extern const struct class class_physique__Player;
void gamnit___gamnit__Sprite___core__kernel__Object__init(val* self);
void gamnit___gamnit__Sprite___texture_61d(val* self, val* p0);
void gamnit___gamnit__Sprite___center_61d(val* self, val* p0);
void gamnit___gamnit__Sprite___draw(val* self);
val* gamnit___gamnit__Sprite___texture(val* self);
val* gamnit___gamnit__Sprite___center(val* self);
val* gamnit___gamnit__Sprite___tint(val* self);
double gamnit___gamnit__Sprite___scale(val* self);
short int gamnit___gamnit__Sprite___invert_x(val* self);
double gamnit___gamnit__Sprite___rotation(val* self);
extern const struct class class_gamnit__Sprite;
extern const int COLOR_gamnit__flat__Sprite___rotation;
extern const int COLOR_gamnit__flat__Sprite___invert_x;
extern const int COLOR_gamnit__flat__Sprite___scale;
extern const struct type type_core__Array__core__Float;
extern const int COLOR_core__array__Array__with_capacity;
val* BOX_core__Float(double);
extern const int COLOR_core__abstract_collection__Sequence__push;
extern const int COLOR_gamnit__flat__Sprite___tint;
val* gamnit___gamnit__GamnitProgram___attributes(val* self);
val* gamnit___gamnit__GamnitProgram___uniforms(val* self);
val* gamnit___gamnit__GamnitProgram___gl_program(val* self);
void gamnit___gamnit__GamnitProgram___compile_and_link(val* self);
val* gamnit___gamnit__GamnitProgram___error(val* self);
void gamnit___gamnit__GamnitProgram___error_61d(val* self, val* p0);
void gamnit___gamnit__GamnitProgram___gl_program_61d(val* self, val* p0);
val* gamnit___gamnit__GamnitProgramFromSource___GamnitProgram__vertex_shader(val* self);
val* gamnit___gamnit__GamnitProgramFromSource___GamnitProgram__fragment_shader(val* self);
void gamnit___gamnit__GamnitProgram___use(val* self);
val* gamnit___gamnit__Simple2dProgram___gamnit__programs__GamnitProgramFromSource__vertex_shader_source(val* self);
val* gamnit___gamnit__Simple2dProgram___gamnit__programs__GamnitProgramFromSource__fragment_shader_source(val* self);
val* gamnit___gamnit__Simple2dProgram___coord(val* self);
val* gamnit___gamnit__Simple2dProgram___tex_coord(val* self);
val* gamnit___gamnit__Simple2dProgram___color(val* self);
val* gamnit___gamnit__Simple2dProgram___mvp(val* self);
val* gamnit___gamnit__Simple2dProgram___translation(val* self);
val* gamnit___gamnit__Simple2dProgram___scale(val* self);
val* gamnit___gamnit__Simple2dProgram___use_texture(val* self);
val* gamnit___gamnit__Simple2dProgram___texture(val* self);
val* gamnit___gamnit__Simple2dProgram___rotation(val* self);
extern const struct class class_gamnit__Simple2dProgram;
val* NEW_gamnit__AttributeMap(const struct type* type);
extern const struct type type_gamnit__AttributeMap;
extern const int COLOR_gamnit__programs__ShaderVariableMap__program_61d;
extern const int COLOR_gamnit__programs__GamnitProgram___attributes;
val* NEW_gamnit__UniformMap(const struct type* type);
extern const struct type type_gamnit__UniformMap;
extern const int COLOR_gamnit__programs__GamnitProgram___uniforms;
extern const int COLOR_gamnit__programs__GamnitProgram___deleted;
extern const int COLOR_gamnit__flat__Simple2dProgram___vertex_shader_source;
extern const int COLOR_gamnit__flat__Simple2dProgram___fragment_shader_source;
long glesv2___glesv2__GLProgram___attrib_location(val* self, val* p0);
long glesv2___glesv2__GLProgram___uniform_location(val* self, val* p0);
short int glesv2___glesv2__GLProgram___is_linked(val* self);
val* glesv2___glesv2__GLProgram___active_attrib_name(val* self, long p0);
long glesv2___glesv2__GLProgram___active_attrib_size(val* self, long p0);
val* glesv2___glesv2__GLProgram___active_attrib_type(val* self, long p0);
val* glesv2___glesv2__GLProgram___active_uniform_name(val* self, long p0);
long glesv2___glesv2__GLProgram___active_uniform_size(val* self, long p0);
val* glesv2___glesv2__GLProgram___active_uniform_type(val* self, long p0);
long glesv2___glesv2__GLProgram___active_attribute_max_length(val* self);
void glesv2___glesv2__GLProgram___active_attrib_name_native(val* self, long p0, long p1, char* p2);
long glesv2___glesv2__GLProgram___active_uniform_max_length(val* self);
void glesv2___glesv2__GLProgram___active_uniform_name_native(val* self, long p0, long p1, char* p2);
extern const struct class class_glesv2__GLProgram;
short int glesv2___glesv2__GLShader___is_compiled(val* self);
extern const struct class class_glesv2__GLShader;
short int glesv2___glesv2__GLEnum___core__kernel__Object___61d_61d(val* self, val* p0);
long glesv2___glesv2__GLEnum___core__kernel__Object__hash(val* self);
extern const struct class class_glesv2__GLGetParameterName;
extern const struct class class_glesv2__GLShaderType;
val* c___c__CArray___native_array(val* self);
void c___c__CArray___destroy(val* self);
short int c___c__CArray___destroyed(val* self);
void c___c__CArray___native_array_61d(val* self, val* p0);
val* c___c__CArray___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
void glesv2___glesv2__GLfloatArray___c__CArray__init(val* self, long p0);
void c___c__CArray___destroyed_61d(val* self, short int p0);
void c___c__CArray____91d_93d_61d(val* self, long p0, val* p1);
val* glesv2___glesv2__GLfloatArray___from(val* self, val* p0);
void glesv2___glesv2__GLfloatArray___fill_from(val* self, val* p0);
void c___c__CArray___init(val* self, long p0);
extern const struct class class_glesv2__GLfloatArray;
extern const int COLOR_c__CArray___destroyed;
val* VIRTUAL_glesv2___glesv2__NativeGLfloatArray___c__NativeCArray___91d_93d(val* self, long p0);
void VIRTUAL_glesv2___glesv2__NativeGLfloatArray___c__NativeCArray___91d_93d_61d(val* self, long p0, val* p1);
val* gamnit__programs___glesv2__NativeGLfloatArray___matrix(val* self);
void gamnit__programs___glesv2__NativeGLfloatArray___matrix_set(val* self, long p0, long p1, double p2);
val* glesv2___glesv2__NativeGLfloatArray___new(val* self, long p0);
extern const struct class class_glesv2__NativeGLfloatArray;
extern const struct class class_glesv2__GLEnum;
val* glesv2___glesv2__GLError___core__abstract_text__Object__to_s(val* self);
extern const struct class class_glesv2__GLError;
extern const struct class class_glesv2__GLTextureUnit;
extern const struct class class_glesv2__GLPack;
extern const struct class class_glesv2__GLTexParameteri;
extern const struct class class_glesv2__GLTextureTarget;
void glesv2___glesv2__GLCap___core__kernel__Object__init(val* self);
short int glesv2___glesv2__GLCap___core__kernel__Object___61d_61d(val* self, val* p0);
long glesv2___glesv2__GLCap___core__kernel__Object__hash(val* self);
void glesv2___glesv2__GLCap___val_61d(val* self, long p0);
long glesv2___glesv2__GLCap___val(val* self);
void glesv2___glesv2__GLCap___enable(val* self);
void glesv2___glesv2__GLCap___enable_native(val* self, long p0);
extern const struct class class_glesv2__GLCap;
val* glesv2___glesv2__GLES___capabilities(val* self);
extern const struct class class_glesv2__GLES;
extern const struct class class_glesv2__GLTexParameteriName;
extern const struct class class_glesv2__GLHintTarget;
extern const struct class class_glesv2__GLHintMode;
val* glesv2___glesv2__GLCapabilities___blend(val* self);
val* glesv2___glesv2__GLCapabilities___depth_test(val* self);
extern const struct class class_glesv2__GLCapabilities;
extern const struct class class_glesv2__GLDataType;
extern const struct class class_glesv2__GLDrawMode;
extern const struct class class_glesv2__GLBlendFactor;
extern const struct class class_glesv2__GLDepthFunc;
extern const struct class class_glesv2__GLPixelFormat;
val* glesv2___glesv2__GLBuffer____124d(val* self, val* p0);
extern const struct class class_glesv2__GLBuffer;
void c___c__CIntArray___init(val* self, long p0);
extern const struct class class_c__CIntArray;
val* VIRTUAL_c___c__NativeCIntArray___NativeCArray___91d_93d(val* self, long p0);
void VIRTUAL_c___c__NativeCIntArray___NativeCArray___91d_93d_61d(val* self, long p0, val* p1);
val* c___c__NativeCIntArray___new(val* self, long p0);
extern const struct class class_c__NativeCIntArray;
val* VIRTUAL_c___c__NativeCByteArray___NativeCArray___91d_93d(val* self, long p0);
void VIRTUAL_c___c__NativeCByteArray___NativeCArray___91d_93d_61d(val* self, long p0, val* p1);
extern const struct class class_c__NativeCByteArray;
void geometry___geometry__Point3d___core__kernel__Object__init(val* self);
short int geometry___geometry__IPoint___core__kernel__Object___61d_61d(val* self, val* p0);
val* geometry___geometry__IPoint3d___core__abstract_text__Object__to_s(val* self);
val* geometry___geometry__Point___IPoint__x(val* self);
val* geometry___geometry__Point___IPoint__y(val* self);
void geometry___geometry__Point___x_61d(val* self, val* p0);
void geometry___geometry__Point___y_61d(val* self, val* p0);
val* geometry___geometry__Point3d___IPoint3d__z(val* self);
void geometry___geometry__Point3d___z_61d(val* self, val* p0);
void geometry___geometry__Point___core__kernel__Object__init(val* self);
extern const struct class class_geometry__Point3d;
void matrix___matrix__Matrix___core__kernel__Object__init(val* self);
short int matrix___matrix__Matrix___core__kernel__Object___61d_61d(val* self, val* p0);
val* matrix___matrix__Matrix___core__abstract_text__Object__to_s(val* self);
long matrix___matrix__Matrix___core__kernel__Object__hash(val* self);
void gamnit__programs___matrix__Matrix___fill_native(val* self, val* p0);
long matrix___matrix__Matrix___width(val* self);
long matrix___matrix__Matrix___height(val* self);
val* matrix___matrix__Matrix___identity(val* self, long p0);
void matrix__projection___Matrix___translate(val* self, double p0, double p1, double p2);
val* matrix___matrix__Matrix____42d(val* self, val* p0);
val* matrix__projection___Matrix___perspective(val* self, double p0, double p1, double p2, double p3);
val* matrix__projection___Matrix___orthogonal(val* self, double p0, double p1, double p2, double p3, double p4, double p5);
val* matrix__projection___Matrix___rotation(val* self, double p0, double p1, double p2, double p3);
double matrix___matrix__Matrix____91d_93d(val* self, long p0, long p1);
val* matrix___matrix__Matrix___items(val* self);
void matrix___matrix__Matrix___width_61d(val* self, long p0);
void matrix___matrix__Matrix___height_61d(val* self, long p0);
void matrix___matrix__Matrix____91d_93d_61d(val* self, long p0, long p1, double p2);
void matrix__projection___Matrix___rotate(val* self, double p0, double p1, double p2, double p3);
val* matrix__projection___Matrix___frustum(val* self, double p0, double p1, double p2, double p3, double p4, double p5);
void matrix___matrix__Matrix___items_61d(val* self, val* p0);
extern const struct class class_matrix__Matrix;
val* realtime___realtime__Timespec___core__abstract_text__Object__to_s(val* self);
val* realtime___realtime__Timespec___monotonic_now(val* self);
double realtime___realtime__Timespec___to_f(val* self);
long realtime___realtime__Timespec___sec(val* self);
long realtime___realtime__Timespec___nanosec(val* self);
val* realtime___realtime__Timespec____45d(val* self, val* p0);
val* realtime___realtime__Timespec___new(val* self, long p0, long p1);
extern const struct class class_realtime__Timespec;
val* realtime___realtime__Clock___total(val* self);
val* realtime___realtime__Clock___lapse(val* self);
val* realtime___realtime__Clock___time_at_beginning(val* self);
val* realtime___realtime__Clock___time_at_last_lapse(val* self);
void realtime___realtime__Clock___time_at_last_lapse_61d(val* self, val* p0);
extern const struct class class_realtime__Clock;
val* NEW_realtime__Timespec(const struct type* type);
extern const struct type type_realtime__Timespec;
extern const int COLOR_realtime__Timespec__monotonic_now;
extern const int COLOR_realtime__Clock___time_at_beginning;
extern const int COLOR_realtime__Clock___time_at_last_lapse;
void physique__engine___app__App___app__app_base__AppComponent__on_create(val* self);
void app___app__AppComponent___on_restore_state(val* self);
void app___app__AppComponent___on_start(val* self);
void app___app__AppComponent___on_resume(val* self);
void linux___app__App___setup(val* self);
void gamnit___app__App___run(val* self);
val* gamnit___app__App___display(val* self);
void app___app__App___init(val* self);
void gamnit__limit_fps___app__App___frame_full(val* self);
val* physique__engine___app__App___world(val* self);
void physique__engine___app__App___draw_walls(val* self);
void physique__engine___app__App___draw_squars(val* self);
void physique__engine___app__App___create_player(val* self);
void physique__engine___app__App___load_world_entities(val* self);
void gamnit__limit_fps___app__App___limit_fps(val* self);
val* gamnit__flat___app__App___simple_95d2d_program(val* self);
val* physique__engine___app__App___entities(val* self);
val* gamnit__flat___app__App___sprites(val* self);
void gamnit__flat___app__App___frame_core(val* self, val* p0);
void gamnit__gamnit_linux___app__App___feed_events(val* self);
val* gamnit__limit_fps___app__App___clock(val* self);
long gamnit__limit_fps___app__App___frame_count_deadline(val* self);
long gamnit__limit_fps___app__App___frame_count(val* self);
void gamnit__limit_fps___app__App___current_fps_61d(val* self, double p0);
void gamnit__limit_fps___app__App___frame_count_61d(val* self, long p0);
void gamnit__limit_fps___app__App___frame_count_deadline_61d(val* self, long p0);
double physique__engine___app__App___maximum_fps(val* self);
void gamnit___app__App___display_61d(val* self, val* p0);
val* gamnit__flat___app__App___clock(val* self);
void physique__engine___app__App___update(val* self, double p0);
void gamnit__flat___app__App___frame_core_draw(val* self, val* p0);
short int physique__engine___app__App___accept_event(val* self, val* p0);
void gamnit__flat___app__App___frame_core_world_sprites(val* self, val* p0);
void gamnit__flat___app__App___frame_core_ui_sprites(val* self, val* p0);
val* gamnit__flat___app__App___world_camera(val* self);
val* gamnit__flat___app__App___ui_camera(val* self);
val* gamnit__flat___app__App___ui_sprites(val* self);
void app___app__App___setup(val* self);
void gamnit__flat___app__App___app__app_base__AppComponent__on_create(val* self);
void gamnit___app__App___frame_full(val* self);
void gamnit___app__App___app__app_base__AppComponent__on_create(val* self);
void app___app__AppComponent___on_create(val* self);
extern const struct class class_app__App;
extern const int COLOR_gamnit__limit_fps__App___maximum_fps;
extern const int COLOR_gamnit__limit_fps__App___current_fps;
val* NEW_realtime__Clock(const struct type* type);
extern const struct type type_realtime__Clock;
extern const int COLOR_gamnit__limit_fps__App___clock;
extern const int COLOR_gamnit__limit_fps__App___frame_count;
extern const int COLOR_gamnit__limit_fps__App___frame_count_deadline;
val* NEW_core__List(const struct type* type);
extern const struct type type_core__List__gamnit__Sprite;
extern const int COLOR_gamnit__flat__App___sprites;
extern const int COLOR_gamnit__flat__App___ui_sprites;
val* NEW_physique__World(const struct type* type);
extern const struct type type_physique__World;
extern const int COLOR_physique__engine__App___world;
extern const int COLOR_physique__engine__App___entities;
long gamnit__egl___GamnitDisplay___width(val* self);
long gamnit__egl___GamnitDisplay___height(val* self);
void gamnit__display_linux___GamnitDisplay___setup(val* self);
void gamnit__egl___GamnitDisplay___flip(val* self);
val* gamnit__display_linux___GamnitDisplay___sdl_display(val* self);
void gamnit__gamnit_linux___GamnitDisplay___check_lock_cursor(val* self);
val* gamnit__egl___GamnitDisplay___window_surface(val* self);
val* gamnit__egl___GamnitDisplay___egl_display(val* self);
void gamnit__display_linux___GamnitDisplay___sdl_display_61d(val* self, val* p0);
val* gamnit__display_linux___GamnitDisplay___setup_sdl(val* self, long p0, long p1);
long gamnit__display_linux___GamnitDisplay___requested_width(val* self);
long gamnit__display_linux___GamnitDisplay___requested_height(val* self);
val* gamnit__display_linux___GamnitDisplay___setup_x11(val* self);
val* gamnit__display_linux___GamnitDisplay___window_handle(val* self);
void gamnit__egl___GamnitDisplay___setup_egl_display(val* self, val* p0);
void gamnit__egl___GamnitDisplay___select_egl_config(val* self, long p0, long p1, long p2, long p3, long p4, long p5, long p6);
void gamnit__egl___GamnitDisplay___setup_egl_context(val* self, val* p0);
short int gamnit___gamnit__GamnitDisplay___lock_cursor(val* self);
void gamnit__egl___GamnitDisplay___egl_display_61d(val* self, val* p0);
void gamnit__egl___GamnitDisplay___egl_config_61d(val* self, val* p0);
val* gamnit__egl___GamnitDisplay___egl_config(val* self);
void gamnit__egl___GamnitDisplay___window_surface_61d(val* self, val* p0);
void gamnit__egl___GamnitDisplay___egl_context_61d(val* self, val* p0);
val* gamnit__egl___GamnitDisplay___egl_context(val* self);
double gamnit___gamnit__GamnitDisplay___aspect_ratio(val* self);
extern const struct class class_gamnit__GamnitDisplay;
extern const int COLOR_gamnit__display__GamnitDisplay___lock_cursor;
extern const int COLOR_gamnit__display__GamnitDisplay___show_cursor;
extern const int COLOR_gamnit__display_linux__GamnitDisplay___requested_width;
extern const int COLOR_gamnit__display_linux__GamnitDisplay___requested_height;
void gamnit___gamnit__Texture___load(val* self, val* p0);
val* gamnit___gamnit__Texture___error(val* self);
double gamnit___gamnit__Texture___width(val* self);
double gamnit___gamnit__Texture___height(val* self);
double gamnit___gamnit__Texture___offset_left(val* self);
double gamnit___gamnit__Texture___offset_bottom(val* self);
double gamnit___gamnit__Texture___offset_right(val* self);
double gamnit___gamnit__Texture___offset_top(val* self);
val* gamnit___gamnit__Texture___new(val* self, val* p0);
val* gamnit___gamnit__Texture___subtexture(val* self, val* p0, val* p1, val* p2, val* p3);
val* gamnit___gamnit__Texture___root(val* self);
void gamnit___gamnit__Texture___width_61d(val* self, double p0);
void gamnit___gamnit__Texture___height_61d(val* self, double p0);
void gamnit___gamnit__Texture___error_61d(val* self, val* p0);
long gamnit___gamnit__Texture___gl_texture(val* self);
val* gamnit__flat___Texture___texture_coords_invert_x(val* self);
val* gamnit__flat___Texture___texture_coords(val* self);
val* gamnit__flat___Texture___vertices(val* self);
extern const struct class class_gamnit__Texture;
extern const int COLOR_gamnit__textures__Texture___width;
extern const int COLOR_gamnit__textures__Texture___height;
void gamnit___gamnit__GamnitAssetTexture___core__kernel__Object__init(val* self);
val* gamnit___gamnit__GamnitAssetTexture___core__abstract_text__Object__to_s(val* self);
void gamnit___gamnit__GamnitAssetTexture___Texture__load(val* self, val* p0);
val* gamnit___gamnit__GamnitRootTexture___Texture__root(val* self);
long gamnit___gamnit__GamnitRootTexture___Texture__gl_texture(val* self);
short int gamnit___gamnit__GamnitRootTexture___loaded(val* self);
void gamnit___gamnit__GamnitRootTexture___loaded_61d(val* self, short int p0);
void gamnit___gamnit__GamnitRootTexture___load_from_pixels(val* self, val* p0, long p1, long p2, val* p3);
void gamnit___gamnit__GamnitRootTexture___gl_texture_61d(val* self, long p0);
void gamnit___gamnit__GamnitAssetTexture___path_61d(val* self, val* p0);
val* gamnit___gamnit__GamnitAssetTexture___path(val* self);
void gamnit__display_linux___GamnitAssetTexture___load_from_platform(val* self);
void gamnit___gamnit__GamnitRootTexture___core__kernel__Object__init(val* self);
extern const struct class class_gamnit__GamnitAssetTexture;
extern const int COLOR_gamnit__textures__GamnitRootTexture___loaded;
extern const int COLOR_gamnit__textures__GamnitRootTexture___gl_texture;
extern const int COLOR_gamnit__textures__GamnitRootTexture___deleted;
void gamnit___gamnit__GamnitSubtexture___core__kernel__Object__init(val* self);
void gamnit___gamnit__GamnitSubtexture___Texture__load(val* self, val* p0);
double gamnit___gamnit__GamnitSubtexture___Texture__offset_left(val* self);
double gamnit___gamnit__GamnitSubtexture___Texture__offset_bottom(val* self);
double gamnit___gamnit__GamnitSubtexture___Texture__offset_right(val* self);
double gamnit___gamnit__GamnitSubtexture___Texture__offset_top(val* self);
val* gamnit___gamnit__GamnitSubtexture___Texture__root(val* self);
val* gamnit___gamnit__GamnitSubtexture___parent(val* self);
double gamnit___gamnit__GamnitSubtexture___left(val* self);
double gamnit___gamnit__GamnitSubtexture___top(val* self);
void gamnit___gamnit__GamnitSubtexture___root_61d(val* self, val* p0);
void gamnit___gamnit__GamnitSubtexture___parent_61d(val* self, val* p0);
void gamnit___gamnit__GamnitSubtexture___left_61d(val* self, double p0);
void gamnit___gamnit__GamnitSubtexture___top_61d(val* self, double p0);
void gamnit___gamnit__GamnitSubtexture___set_wh(val* self, double p0, double p1);
extern const struct class class_gamnit__GamnitSubtexture;
void core___core__HashSet___core__kernel__Object__init(val* self);
short int core___core__Set___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__Set___core__kernel__Object__hash(val* self);
long core___core__HashSet___core__abstract_collection__Collection__length(val* self);
short int core___core__HashSet___core__abstract_collection__Collection__is_empty(val* self);
val* core___core__HashSet___core__abstract_collection__Collection__iterator(val* self);
short int core___core__HashSet___core__abstract_collection__Collection__has(val* self, val* p0);
val* core___core__HashSet___core__abstract_collection__Collection__first(val* self);
val* core__hash_collection___core__hash_collection__HashCollection___node_at(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashCollection___node_at_idx(val* self, long p0, val* p1);
long core__hash_collection___core__hash_collection__HashCollection___index_at(val* self, val* p0);
void core__hash_collection___core__hash_collection__HashCollection___enlarge(val* self, long p0);
void core__hash_collection___core__hash_collection__HashCollection___store(val* self, long p0, val* p1);
void core___core__HashSet___core__abstract_collection__SimpleCollection__add(val* self, val* p0);
extern const struct class class_gamnit__TextureSet;
extern const int COLOR_core__hash_collection__HashCollection___capacity;
extern const int COLOR_core__hash_collection__HashCollection___the_length;
void gamnit___gamnit__ShaderVariable___core__kernel__Object__init(val* self);
val* gamnit___gamnit__ShaderVariable___core__abstract_text__Object__to_s(val* self);
void gamnit___gamnit__ShaderVariable___location_61d(val* self, long p0);
void gamnit___gamnit__ShaderVariable___program_61d(val* self, val* p0);
void gamnit___gamnit__ShaderVariable___name_61d(val* self, val* p0);
void gamnit___gamnit__ShaderVariable___size_61d(val* self, long p0);
val* gamnit___gamnit__ShaderVariable___name(val* self);
long gamnit___gamnit__ShaderVariable___location(val* self);
long gamnit___gamnit__ShaderVariable___size(val* self);
short int gamnit___gamnit__ShaderVariable___is_active(val* self);
val* gamnit___gamnit__ShaderVariable___program(val* self);
void gamnit___gamnit__Attribute___array_enabled_61d(val* self, short int p0);
void gamnit___gamnit__Attribute___array_enabled_cache_61d(val* self, short int p0);
void gamnit___gamnit__Attribute___array(val* self, val* p0, long p1);
val* gamnit___gamnit__Attribute___native_float_array(val* self);
void gamnit___gamnit__Attribute___native_float_array_61d(val* self, val* p0);
extern const struct class class_gamnit__Attribute;
extern const int COLOR_gamnit__programs__Attribute___array_enabled_cache;
void gamnit___gamnit__AttributeFloat___uniform(val* self, double p0);
extern const struct class class_gamnit__AttributeFloat;
extern const struct class class_gamnit__AttributeVec2;
extern const struct class class_gamnit__AttributeVec3;
void gamnit___gamnit__AttributeVec4___uniform(val* self, double p0, double p1, double p2, double p3);
extern const struct class class_gamnit__AttributeVec4;
short int gamnit___gamnit__InactiveVariable___ShaderVariable__is_active(val* self);
extern const struct class class_gamnit__InactiveAttribute;
void gamnit___gamnit__Uniform___uniform_95d1i(val* self, long p0, long p1);
extern const struct class class_gamnit__Uniform;
void gamnit___gamnit__UniformBool___uniform(val* self, short int p0);
extern const struct class class_gamnit__UniformBool;
extern const struct class class_gamnit__UniformFloat;
extern const struct class class_gamnit__UniformVec2;
extern const struct class class_gamnit__UniformVec3;
extern const struct class class_gamnit__UniformVec4;
void gamnit___gamnit__UniformSampler2D___uniform(val* self, long p0);
extern const struct class class_gamnit__UniformSampler2D;
void gamnit___gamnit__UniformMat4___uniform(val* self, val* p0);
val* gamnit___gamnit__UniformMat4___native_matrix_cache(val* self);
void gamnit___gamnit__UniformMat4___native_matrix_cache_61d(val* self, val* p0);
void gamnit___gamnit__UniformMat4___uniform_matrix_95d4f(val* self, long p0, long p1, short int p2, val* p3);
extern const struct class class_gamnit__UniformMat4;
short int gamnit___gamnit__InactiveUniform___ShaderVariable__is_active(val* self);
extern const struct class class_gamnit__InactiveUniform;
void gamnit___gamnit__Shader___core__kernel__Object__init(val* self);
void gamnit___gamnit__Shader___source_61d(val* self, val* p0);
void gamnit___gamnit__Shader___compile(val* self);
val* gamnit___gamnit__Shader___error(val* self);
val* gamnit___gamnit__Shader___gl_shader(val* self);
val* gamnit___gamnit__VertexShader___Shader__gl_shader_type(val* self);
void gamnit___gamnit__Shader___error_61d(val* self, val* p0);
void gamnit___gamnit__Shader___gl_shader_61d(val* self, val* p0);
val* gamnit___gamnit__Shader___source(val* self);
extern const struct class class_gamnit__VertexShader;
extern const int COLOR_gamnit__programs__Shader___deleted;
val* gamnit___gamnit__FragmentShader___Shader__gl_shader_type(val* self);
extern const struct class class_gamnit__FragmentShader;
void gamnit___gamnit__ShaderVariableMap___core__kernel__Object__init(val* self);
short int core___core__MapRead___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__MapRead___core__kernel__Object__hash(val* self);
val* gamnit___gamnit__AttributeMap___core__abstract_collection__MapRead___91d_93d(val* self, val* p0);
long core___core__HashMap___core__abstract_collection__MapRead__length(val* self);
val* core___core__HashMap___core__abstract_collection__MapRead__iterator(val* self);
short int core___core__HashMap___core__abstract_collection__MapRead__has_key(val* self, val* p0);
short int core___core__HashMap___core__abstract_collection__MapRead__is_empty(val* self);
val* gamnit___gamnit__AttributeMap___core__abstract_collection__MapRead__provide_default_value(val* self, val* p0);
void core___core__HashMap___core__abstract_collection__Map___91d_93d_61d(val* self, val* p0, val* p1);
void gamnit___gamnit__ShaderVariableMap___program_61d(val* self, val* p0);
val* gamnit___gamnit__ShaderVariableMap___program(val* self);
long gamnit___gamnit__AttributeMap___ShaderVariableMap__max_name_length(val* self);
void core___core__HashMap___core__kernel__Object__init(val* self);
val* core___core__HashMap___core__abstract_collection__MapRead___91d_93d(val* self, val* p0);
val* gamnit___gamnit__ShaderVariableMap___core__abstract_collection__MapRead___91d_93d(val* self, val* p0);
extern const struct class class_gamnit__AttributeMap;
val* gamnit___gamnit__UniformMap___core__abstract_collection__MapRead___91d_93d(val* self, val* p0);
val* gamnit___gamnit__UniformMap___core__abstract_collection__MapRead__provide_default_value(val* self, val* p0);
long gamnit___gamnit__UniformMap___ShaderVariableMap__max_name_length(val* self);
extern const struct class class_gamnit__UniformMap;
void gamnit___gamnit__Camera___core__kernel__Object__init(val* self);
void gamnit___gamnit__Camera___display_61d(val* self, val* p0);
val* gamnit___gamnit__Camera___display(val* self);
val* gamnit___gamnit__Camera___position(val* self);
val* gamnit___gamnit__EulerCamera___Camera__mvp_matrix(val* self);
void gamnit___gamnit__EulerCamera___reset_height(val* self, val* p0);
void gamnit___gamnit__EulerCamera___near_61d(val* self, double p0);
double gamnit___gamnit__EulerCamera___field_of_view_y(val* self);
void gamnit___gamnit__EulerCamera___pitch_61d(val* self, double p0);
void gamnit___gamnit__EulerCamera___yaw_61d(val* self, double p0);
void gamnit___gamnit__EulerCamera___roll_61d(val* self, double p0);
val* gamnit___gamnit__EulerCamera___rotation_matrix(val* self);
double gamnit___gamnit__EulerCamera___near(val* self);
double gamnit___gamnit__EulerCamera___far(val* self);
double gamnit___gamnit__EulerCamera___yaw(val* self);
double gamnit___gamnit__EulerCamera___pitch(val* self);
double gamnit___gamnit__EulerCamera___roll(val* self);
extern const struct class class_gamnit__EulerCamera;
val* NEW_geometry__Point3d(const struct type* type);
extern const struct type type_geometry__Point3d__core__Float;
extern const int COLOR_geometry__points_and_lines__Point__x_61d;
extern const int COLOR_geometry__points_and_lines__Point__y_61d;
extern const int COLOR_geometry__points_and_lines__Point3d__z_61d;
extern const int COLOR_gamnit__cameras__Camera___position;
extern const int COLOR_gamnit__cameras__EulerCamera___pitch;
extern const int COLOR_gamnit__cameras__EulerCamera___yaw;
extern const int COLOR_gamnit__cameras__EulerCamera___roll;
extern const int COLOR_gamnit__cameras__EulerCamera___field_of_view_y;
extern const int COLOR_gamnit__cameras__EulerCamera___near;
extern const int COLOR_gamnit__cameras__EulerCamera___far;
extern const int COLOR_gamnit__cameras__EulerCamera___sensitivity;
val* gamnit___gamnit__UICamera___Camera__mvp_matrix(val* self);
double gamnit___gamnit__UICamera___width(val* self);
double gamnit___gamnit__UICamera___height(val* self);
double gamnit___gamnit__UICamera___near(val* self);
double gamnit___gamnit__UICamera___far(val* self);
extern const struct class class_gamnit__UICamera;
extern const int COLOR_gamnit__cameras__UICamera___near;
extern const int COLOR_gamnit__cameras__UICamera___far;
val* physique___physique__Spritesheet___ufo_green(val* self);
val* physique___physique__Spritesheet___root_texture(val* self);
val* physique___physique__Spritesheet___ufo_yellow(val* self);
extern const struct class class_physique__Spritesheet;
val* NEW_gamnit__Texture(const struct type* type);
extern const struct type type_gamnit__Texture;
extern const int COLOR_gamnit__textures__Texture__new;
extern const int COLOR_physique__spritesheet__Spritesheet___root_texture;
extern const int COLOR_physique__spritesheet__Spritesheet__root_texture;
extern const int COLOR_gamnit__textures__Texture__subtexture;
extern const int COLOR_physique__spritesheet__Spritesheet___beam0;
extern const int COLOR_physique__spritesheet__Spritesheet___beam1;
extern const int COLOR_physique__spritesheet__Spritesheet___beam2;
extern const int COLOR_physique__spritesheet__Spritesheet___beam3;
extern const int COLOR_physique__spritesheet__Spritesheet___beam4;
extern const int COLOR_physique__spritesheet__Spritesheet___beam5;
extern const int COLOR_physique__spritesheet__Spritesheet___beam6;
extern const int COLOR_physique__spritesheet__Spritesheet___beam_long1;
extern const int COLOR_physique__spritesheet__Spritesheet___beam_long2;
extern const int COLOR_physique__spritesheet__Spritesheet___bold_silver;
extern const int COLOR_physique__spritesheet__Spritesheet___bolt_bronze;
extern const int COLOR_physique__spritesheet__Spritesheet___bolt_gold;
extern const int COLOR_physique__spritesheet__Spritesheet___button_blue;
extern const int COLOR_physique__spritesheet__Spritesheet___button_green;
extern const int COLOR_physique__spritesheet__Spritesheet___button_red;
extern const int COLOR_physique__spritesheet__Spritesheet___button_yellow;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_blue_95d0;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_blue_95d1;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_blue_95d2;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_blue_95d3;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_blue_95d4;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_blue_95d5;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_blue_95d6;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_blue_95d7;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_green_95d0;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_green_95d1;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_green_95d2;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_green_95d3;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_green_95d4;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_green_95d5;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_green_95d6;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_green_95d7;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_red_95d0;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_red_95d1;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_red_95d2;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_red_95d3;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_red_95d4;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_red_95d5;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_red_95d6;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_red_95d7;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_yellow_95d0;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_yellow_95d1;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_yellow_95d2;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_yellow_95d3;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_yellow_95d4;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_yellow_95d5;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_yellow_95d6;
extern const int COLOR_physique__spritesheet__Spritesheet___cockpit_yellow_95d7;
extern const int COLOR_physique__spritesheet__Spritesheet___cursor;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_black1;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_black2;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_black3;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_black4;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_black5;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_blue1;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_blue2;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_blue3;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_blue4;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_blue5;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_green1;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_green2;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_green3;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_green4;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_green5;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_red1;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_red2;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_red3;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_red4;
extern const int COLOR_physique__spritesheet__Spritesheet___enemy_red5;
extern const int COLOR_physique__spritesheet__Spritesheet___engine1;
extern const int COLOR_physique__spritesheet__Spritesheet___engine2;
extern const int COLOR_physique__spritesheet__Spritesheet___engine3;
extern const int COLOR_physique__spritesheet__Spritesheet___engine4;
extern const int COLOR_physique__spritesheet__Spritesheet___engine5;
extern const int COLOR_physique__spritesheet__Spritesheet___fire00;
extern const int COLOR_physique__spritesheet__Spritesheet___fire01;
extern const int COLOR_physique__spritesheet__Spritesheet___fire02;
extern const int COLOR_physique__spritesheet__Spritesheet___fire03;
extern const int COLOR_physique__spritesheet__Spritesheet___fire04;
extern const int COLOR_physique__spritesheet__Spritesheet___fire05;
extern const int COLOR_physique__spritesheet__Spritesheet___fire06;
extern const int COLOR_physique__spritesheet__Spritesheet___fire07;
extern const int COLOR_physique__spritesheet__Spritesheet___fire08;
extern const int COLOR_physique__spritesheet__Spritesheet___fire09;
extern const int COLOR_physique__spritesheet__Spritesheet___fire10;
extern const int COLOR_physique__spritesheet__Spritesheet___fire11;
extern const int COLOR_physique__spritesheet__Spritesheet___fire12;
extern const int COLOR_physique__spritesheet__Spritesheet___fire13;
extern const int COLOR_physique__spritesheet__Spritesheet___fire14;
extern const int COLOR_physique__spritesheet__Spritesheet___fire15;
extern const int COLOR_physique__spritesheet__Spritesheet___fire16;
extern const int COLOR_physique__spritesheet__Spritesheet___fire17;
extern const int COLOR_physique__spritesheet__Spritesheet___fire18;
extern const int COLOR_physique__spritesheet__Spritesheet___fire19;
extern const int COLOR_physique__spritesheet__Spritesheet___gun00;
extern const int COLOR_physique__spritesheet__Spritesheet___gun01;
extern const int COLOR_physique__spritesheet__Spritesheet___gun02;
extern const int COLOR_physique__spritesheet__Spritesheet___gun03;
extern const int COLOR_physique__spritesheet__Spritesheet___gun04;
extern const int COLOR_physique__spritesheet__Spritesheet___gun05;
extern const int COLOR_physique__spritesheet__Spritesheet___gun06;
extern const int COLOR_physique__spritesheet__Spritesheet___gun07;
extern const int COLOR_physique__spritesheet__Spritesheet___gun08;
extern const int COLOR_physique__spritesheet__Spritesheet___gun09;
extern const int COLOR_physique__spritesheet__Spritesheet___gun10;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue01;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue02;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue03;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue04;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue05;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue06;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue07;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue08;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue09;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue10;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue11;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue12;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue13;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue14;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue15;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_blue16;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green01;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green02;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green03;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green04;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green05;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green06;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green07;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green08;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green09;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green10;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green11;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green12;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green13;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green14;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green15;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_green16;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red01;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red02;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red03;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red04;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red05;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red06;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red07;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red08;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red09;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red10;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red11;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red12;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red13;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red14;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red15;
extern const int COLOR_physique__spritesheet__Spritesheet___laser_red16;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_brown_big1;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_brown_big2;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_brown_big3;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_brown_big4;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_brown_med1;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_brown_med3;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_brown_small1;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_brown_small2;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_brown_tiny1;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_brown_tiny2;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_grey_big1;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_grey_big2;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_grey_big3;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_grey_big4;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_grey_med1;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_grey_med2;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_grey_small1;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_grey_small2;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_grey_tiny1;
extern const int COLOR_physique__spritesheet__Spritesheet___meteor_grey_tiny2;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral0;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral1;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral2;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral3;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral4;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral5;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral6;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral7;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral8;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral9;
extern const int COLOR_physique__spritesheet__Spritesheet___numeral_x;
extern const int COLOR_physique__spritesheet__Spritesheet___pill_blue;
extern const int COLOR_physique__spritesheet__Spritesheet___pill_green;
extern const int COLOR_physique__spritesheet__Spritesheet___pill_red;
extern const int COLOR_physique__spritesheet__Spritesheet___pill_yellow;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life1_blue;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life1_green;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life1_orange;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life1_red;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life2_blue;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life2_green;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life2_orange;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life2_red;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life3_blue;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life3_green;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life3_orange;
extern const int COLOR_physique__spritesheet__Spritesheet___player_life3_red;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship1_blue;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship1_damage1;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship1_damage2;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship1_damage3;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship1_green;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship1_orange;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship1_red;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship2_blue;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship2_damage1;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship2_damage2;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship2_damage3;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship2_green;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship2_orange;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship2_red;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship3_blue;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship3_damage1;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship3_damage2;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship3_damage3;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship3_green;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship3_orange;
extern const int COLOR_physique__spritesheet__Spritesheet___player_ship3_red;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_blue;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_blue_bolt;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_blue_shield;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_blue_star;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_green;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_green_bolt;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_green_shield;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_green_star;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_red;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_red_bolt;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_red_shield;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_red_star;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_yellow;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_yellow_bolt;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_yellow_shield;
extern const int COLOR_physique__spritesheet__Spritesheet___powerup_yellow_star;
extern const int COLOR_physique__spritesheet__Spritesheet___scratch1;
extern const int COLOR_physique__spritesheet__Spritesheet___scratch2;
extern const int COLOR_physique__spritesheet__Spritesheet___scratch3;
extern const int COLOR_physique__spritesheet__Spritesheet___shield1;
extern const int COLOR_physique__spritesheet__Spritesheet___shield2;
extern const int COLOR_physique__spritesheet__Spritesheet___shield3;
extern const int COLOR_physique__spritesheet__Spritesheet___shield_bronze;
extern const int COLOR_physique__spritesheet__Spritesheet___shield_gold;
extern const int COLOR_physique__spritesheet__Spritesheet___shield_silver;
extern const int COLOR_physique__spritesheet__Spritesheet___speed;
extern const int COLOR_physique__spritesheet__Spritesheet___star1;
extern const int COLOR_physique__spritesheet__Spritesheet___star2;
extern const int COLOR_physique__spritesheet__Spritesheet___star3;
extern const int COLOR_physique__spritesheet__Spritesheet___star_bronze;
extern const int COLOR_physique__spritesheet__Spritesheet___star_gold;
extern const int COLOR_physique__spritesheet__Spritesheet___star_silver;
extern const int COLOR_physique__spritesheet__Spritesheet___things_bronze;
extern const int COLOR_physique__spritesheet__Spritesheet___things_gold;
extern const int COLOR_physique__spritesheet__Spritesheet___things_silver;
extern const int COLOR_physique__spritesheet__Spritesheet___turret_base_big;
extern const int COLOR_physique__spritesheet__Spritesheet___turret_base_small;
extern const int COLOR_physique__spritesheet__Spritesheet___ufo_blue;
extern const int COLOR_physique__spritesheet__Spritesheet___ufo_green;
extern const int COLOR_physique__spritesheet__Spritesheet___ufo_red;
extern const int COLOR_physique__spritesheet__Spritesheet___ufo_yellow;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_blue_95d0;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_blue_95d1;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_blue_95d2;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_blue_95d3;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_blue_95d4;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_blue_95d5;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_blue_95d6;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_blue_95d7;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_green_95d0;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_green_95d1;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_green_95d2;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_green_95d3;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_green_95d4;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_green_95d5;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_green_95d6;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_green_95d7;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_red_95d0;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_red_95d1;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_red_95d2;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_red_95d3;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_red_95d4;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_red_95d5;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_red_95d6;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_red_95d7;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_yellow_95d0;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_yellow_95d1;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_yellow_95d2;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_yellow_95d3;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_yellow_95d4;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_yellow_95d5;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_yellow_95d6;
extern const int COLOR_physique__spritesheet__Spritesheet___wing_yellow_95d7;
long sdl___sdl__SDLDisplay___mnit__display__Sized__width(val* self);
long sdl___sdl__SDLDisplay___mnit__display__Sized__height(val* self);
val* sdl___sdl__SDLDisplay___events(val* self);
val* sdl___sdl__SDLDisplay___poll_event(val* self);
short int sdl___sdl__SDLDisplay___input_focus(val* self);
void sdl___sdl__SDLDisplay___ignore_mouse_motion_events_61d(val* self, short int p0);
void sdl___sdl__SDLDisplay___warp_mouse(val* self, long p0, long p1);
val* sdl___sdl__SDLDisplay___new(val* self, long p0, long p1);
val* sdl___sdl__SDLDisplay___new_key_event(val* self, char* p0, short int p1);
val* sdl___sdl__SDLDisplay___new_mouse_motion_event(val* self, double p0, double p1, double p2, double p3, short int p4);
val* sdl___sdl__SDLDisplay___new_mouse_button_event(val* self, double p0, double p1, long p2, short int p3);
val* sdl___sdl__SDLDisplay___new_quit_event(val* self);
short int sdl___sdl__SDLDisplay___enable_mouse_motion_events(val* self);
extern const struct class class_sdl__SDLDisplay;
long sdl___sdl__SDLImage___mnit__display__Sized__width(val* self);
long sdl___sdl__SDLImage___mnit__display__Sized__height(val* self);
val* sdl___sdl__SDLImage___from_file(val* self, val* p0);
long sdl___sdl__SDLImage___amask(val* self);
val* sdl___sdl__SDLImage___pixels(val* self);
extern const struct class class_sdl__SDLImage;
void sdl___sdl__SDLMouseEvent___core__kernel__Object__init(val* self);
val* sdl___sdl__SDLMouseButtonEvent___core__abstract_text__Object__to_s(val* self);
double sdl___sdl__SDLMouseEvent___mnit__input__PointerEvent__x(val* self);
double sdl___sdl__SDLMouseEvent___mnit__input__PointerEvent__y(val* self);
short int sdl___sdl__SDLMouseButtonEvent___mnit__input__PointerEvent__pressed(val* self);
void sdl___sdl__SDLMouseEvent___x_61d(val* self, double p0);
void sdl___sdl__SDLMouseEvent___y_61d(val* self, double p0);
void sdl___sdl__SDLMouseButtonEvent___init(val* self, double p0, double p1, long p2, short int p3);
long sdl___sdl__SDLMouseButtonEvent___button(val* self);
void sdl___sdl__SDLMouseButtonEvent___button_61d(val* self, long p0);
void sdl___sdl__SDLMouseButtonEvent___pressed_61d(val* self, short int p0);
extern const struct class class_sdl__SDLMouseButtonEvent;
val* sdl___sdl__SDLMouseMotionEvent___core__abstract_text__Object__to_s(val* self);
short int sdl___sdl__SDLMouseMotionEvent___mnit__input__PointerEvent__pressed(val* self);
void sdl___sdl__SDLMouseMotionEvent___init(val* self, double p0, double p1, double p2, double p3, short int p4);
void sdl___sdl__SDLMouseMotionEvent___rel_x_61d(val* self, double p0);
void sdl___sdl__SDLMouseMotionEvent___rel_y_61d(val* self, double p0);
void sdl___sdl__SDLMouseMotionEvent___pressed_61d(val* self, short int p0);
extern const struct class class_sdl__SDLMouseMotionEvent;
void sdl___sdl__SDLKeyEvent___core__kernel__Object__init(val* self);
val* sdl___sdl__SDLKeyEvent___core__abstract_text__Object__to_s(val* self);
double physique__engine___mnit__KeyEvent___move(val* self);
double physique__engine___mnit__KeyEvent___move_bis(val* self);
short int sdl___sdl__SDLKeyEvent___mnit__input__KeyEvent__is_arrow_right(val* self);
short int sdl___sdl__SDLKeyEvent___mnit__input__KeyEvent__is_arrow_left(val* self);
val* sdl___sdl__SDLKeyEvent___mnit__input__KeyEvent__name(val* self);
void sdl___sdl__SDLKeyEvent___name_61d(val* self, val* p0);
void sdl___sdl__SDLKeyEvent___down_61d(val* self, short int p0);
short int sdl___sdl__SDLKeyEvent___down(val* self);
extern const struct class class_sdl__SDLKeyEvent;
extern const struct class class_sdl__SDLQuitEvent;
val* sdl___sdl__SDLSystemWindowManagerInfo___new(val* self);
val* sdl___sdl__SDLSystemWindowManagerInfo___x11_window_handle(val* self);
extern const struct class class_sdl__SDLSystemWindowManagerInfo;
void egl___egl__EGLDisplay___swap_buffers(val* self, val* p0);
long egl___egl__EGLDisplay___query_surface(val* self, val* p0, long p1);
val* egl___egl__EGLDisplay___new(val* self, val* p0);
short int egl___egl__EGLDisplay___is_valid(val* self);
short int egl___egl__EGLDisplay___initialize(val* self);
val* egl___egl__EGLDisplay___error(val* self);
val* egl___egl__EGLDisplay___create_window_surface(val* self, val* p0, val* p1, val* p2);
val* egl___egl__EGLDisplay___create_context(val* self, val* p0);
short int egl___egl__EGLDisplay___make_current(val* self, val* p0, val* p1, val* p2);
val* egl___egl__EGLDisplay___choose_configs(val* self, val* p0);
long egl___egl__EGLDisplay___config_attrib(val* self, val* p0, long p1);
void egl___egl__EGLDisplay___report_egl_error(val* self, char* p0);
extern const struct class class_egl__EGLDisplay;
val* egl___egl__EGLConfig___attribs(val* self, val* p0);
extern const struct class class_egl__EGLConfig;
val* egl___egl__EGLSurface___attribs(val* self, val* p0);
short int egl___egl__EGLSurface___is_ok(val* self);
extern const struct class class_egl__EGLSurface;
short int egl___egl__EGLContext___is_ok(val* self);
extern const struct class class_egl__EGLContext;
void egl___egl__EGLConfigAttribs___core__kernel__Object__init(val* self);
val* egl___egl__EGLConfigAttribs___conformant(val* self);
val* egl___egl__EGLConfigAttribs___caveat(val* self);
long egl___egl__EGLConfigAttribs___red_size(val* self);
long egl___egl__EGLConfigAttribs___green_size(val* self);
long egl___egl__EGLConfigAttribs___blue_size(val* self);
long egl___egl__EGLConfigAttribs___alpha_size(val* self);
long egl___egl__EGLConfigAttribs___buffer_size(val* self);
long egl___egl__EGLConfigAttribs___depth_size(val* self);
long egl___egl__EGLConfigAttribs___stencil_size(val* self);
void egl___egl__EGLConfigAttribs___display_61d(val* self, val* p0);
void egl___egl__EGLConfigAttribs___config_61d(val* self, val* p0);
val* egl___egl__EGLConfigAttribs___display(val* self);
val* egl___egl__EGLConfigAttribs___config(val* self);
extern const struct class class_egl__EGLConfigAttribs;
val* egl___egl__EGLConfigCaveat___core__abstract_text__Object__to_s(val* self);
val* egl___egl__EGLConfigCaveat___from_i(val* self, long p0);
short int egl___egl__EGLConfigCaveat___is_none(val* self);
short int egl___egl__EGLConfigCaveat___is_dont_care(val* self);
short int egl___egl__EGLConfigCaveat___is_slow(val* self);
short int egl___egl__EGLConfigCaveat___is_non_conformant(val* self);
extern const struct class class_egl__EGLConfigCaveat;
val* egl___egl__EGLConformant___core__abstract_text__Object__to_s(val* self);
val* egl___egl__EGLConformant___from_i(val* self, long p0);
val* egl___egl__EGLConformant___to_a(val* self);
short int egl___egl__EGLConformant___opengl(val* self);
short int egl___egl__EGLConformant___opengl_es(val* self);
short int egl___egl__EGLConformant___opengl_es2(val* self);
short int egl___egl__EGLConformant___openvg(val* self);
extern const struct class class_egl__EGLConformant;
void egl___egl__EGLSurfaceAttribs___core__kernel__Object__init(val* self);
long egl___egl__EGLSurfaceAttribs___width(val* self);
long egl___egl__EGLSurfaceAttribs___height(val* self);
val* egl___egl__EGLSurfaceAttribs___display(val* self);
val* egl___egl__EGLSurfaceAttribs___surface(val* self);
void egl___egl__EGLSurfaceAttribs___display_61d(val* self, val* p0);
void egl___egl__EGLSurfaceAttribs___surface_61d(val* self, val* p0);
extern const struct class class_egl__EGLSurfaceAttribs;
val* egl___egl__EGLError___core__abstract_text__Object__to_s(val* self);
short int egl___egl__EGLError___is_not_initialized(val* self);
short int egl___egl__EGLError___is_bad_access(val* self);
short int egl___egl__EGLError___is_bad_alloc(val* self);
short int egl___egl__EGLError___is_bad_attribute(val* self);
short int egl___egl__EGLError___is_bad_config(val* self);
short int egl___egl__EGLError___is_bad_context(val* self);
short int egl___egl__EGLError___is_bad_current_surface(val* self);
short int egl___egl__EGLError___is_bad_display(val* self);
short int egl___egl__EGLError___is_bad_match(val* self);
short int egl___egl__EGLError___is_bad_native_pixmap(val* self);
short int egl___egl__EGLError___is_bad_native_window(val* self);
short int egl___egl__EGLError___is_bad_parameter(val* self);
short int egl___egl__EGLError___is_bad_surface(val* self);
short int egl___egl__EGLError___is_context_lost(val* self);
extern const struct class class_egl__EGLError;
void egl___egl__EGLConfigChooser___renderable_type_egl(val* self);
void egl___egl__EGLConfigChooser___surface_type_egl(val* self);
void egl___egl__EGLConfigChooser___blue_size_61d(val* self, long p0);
void egl___egl__EGLConfigChooser___green_size_61d(val* self, long p0);
void egl___egl__EGLConfigChooser___red_size_61d(val* self, long p0);
void egl___egl__EGLConfigChooser___alpha_size_61d(val* self, long p0);
void egl___egl__EGLConfigChooser___depth_size_61d(val* self, long p0);
void egl___egl__EGLConfigChooser___stencil_size_61d(val* self, long p0);
void egl___egl__EGLConfigChooser___sample_buffers_61d(val* self, long p0);
void egl___egl__EGLConfigChooser___close(val* self);
val* egl___egl__EGLConfigChooser___choose(val* self, val* p0);
void egl___egl__EGLConfigChooser___renderable_type_61d(val* self, long p0);
void egl___egl__EGLConfigChooser___surface_type_61d(val* self, long p0);
void egl___egl__EGLConfigChooser___insert_attrib_with_val(val* self, long p0, long p1);
void egl___egl__EGLConfigChooser___insert_attrib_key(val* self, long p0);
void egl___egl__EGLConfigChooser___closed_61d(val* self, short int p0);
short int egl___egl__EGLConfigChooser___closed(val* self);
val* egl___egl__EGLConfigChooser___array(val* self);
val* egl___egl__EGLConfigChooser___inserted_attribs(val* self);
extern const struct class class_egl__EGLConfigChooser;
extern const struct type type_core__Array__core__Int;
extern const int COLOR_egl__EGLConfigChooser___array;
extern const int COLOR_egl__EGLConfigChooser___closed;
extern const int COLOR_egl__EGLConfigChooser___inserted_attribs;
